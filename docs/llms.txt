# ByteBabe CLI

```
888888b.          888           888888b.          888              
888  "88b         888           888  "88b         888              
888  .88P         888           888  .88P         888              
8888888K. 888  888888888 .d88b. 8888888K.  8888b. 88888b.  .d88b.  
888  "Y88b888  888888   d8P  Y8b888  "Y88b    "88b888 "88bd8P  Y8b 
888    888888  888888   88888888888    888.d888888888  88888888888 
888   d88PY88b 888Y88b. Y8b.    888   d88P888  888888 d88PY8b.     
8888888P"  "Y88888 "Y888 "Y8888 8888888P" "Y88888888P"  "Y8888  
               888                                                 
          Y8b d88P                                                 
           "Y88P"                                                  
```

Tip:

"Por que usar uma CLI normal quando voc√™ pode ter uma assistente digital te ajudando?"

‚Äî Algum dev √†s 3 da manh√£

ByteBabe √© sua assistente CLI cyberpunk para desenvolvimento. Ela transforma tarefas tediosas em intera√ß√µes divertidas, sem sacrificar a funcionalidade profissional.

## Por que ByteBabe?

* Interface cyberpunk estilosa

* Automa√ß√£o inteligente de tarefas

* Gerenciamento Docker simplificado

* Seguran√ßa com estilo

* Ferramentas de desenvolvimento integradas

* Experi√™ncia √∫nica de usu√°rio

## Feita para Devs Reais

```
 ‚ï±|„ÄÅ
(ÀöÀé „ÄÇ7  
 |„ÄÅÀú„Äµ          
 „Åò„ÅóÀç,)„Éé
```

Chega de CLIs que parecem sa√≠das do MS-DOS dos anos 80. ByteBabe traz:

* Menus interativos coloridos

* Feedback visual moderno

* Comandos intuitivos

* Easter eggs para descobrir

## Principais Recursos

| M√≥dulo |O que faz |N√≠vel de Coolness |
----------------------------------------
| Git |Gerenciamento Git com estilo |‚≠ê‚≠ê‚≠ê |
| Docker |Container management para humanos |‚≠ê‚≠ê‚≠ê‚≠ê |
| DevTools |Suite completa de desenvolvimento |‚≠ê‚≠ê‚≠ê |
| Servers |Servidores web com um comando |‚≠ê‚≠ê‚≠ê‚≠ê |

## Pr√≥ximos Passos

Pronto para mergulhar no cyberpunk? Confira:

* [Instala√ß√£o](installation.html)

* [Quick Start](quick-start.html)

* [Core Modules](core-modules.html)



# Getting Started

Tip:

"A jornada de mil commits come√ßa com um √∫nico git clone"
‚Äî Prov√©rbio Dev

## O que voc√™ precisa

```
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£øRequirements‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
```

* üêß Linux/Unix (sorry Windows-chan)

* üêö Bash 4+

* üì¶ Git (opcional, mas s√©rio?)

* üåê curl ou wget

* üê≥ Docker (opcional)

## Compatibilidade

ByteBabe roda em:

* Ubuntu/Debian üíú

* Fedora/RHEL ‚ù§Ô∏è

* Arch Linux üíô

* macOS ü§ç

## Antes de Come√ßar

Certifique-se de ter:

1. Terminal com suporte a cores

2. Permiss√µes de sudo (quando necess√°rio)

3. Conex√£o com internet

4. Caf√© ‚òï

## Pr√≥ximos Passos

* [üì• Instala√ß√£o](installation.html)

* [üöÄ Quick Start](quick-start.html)

```
         ,----------------,              ,---------,
        ,-----------------------,          ,"        ",
      ,"                      ,"|        ,"        ,"
     +-----------------------+  |      ,"        ,"
     |  .-----------------.  |  |     +---------+
     |  |                 |  |  |     | -==----'|
     |  |  $>ByteBabe    |  |  |     |         |
     |  |  install       |  |  |/----|`---=    |
     |  |  C:\>_         |  |  |   ,/|==== ooo |
     |  |                 |  |  |  // |(((( [33]|
     |  `-----------------'  |," .;'| |((((     |
     +-----------------------+  ;;  | |         /
        /_)______________(_/  //'   | +---------
   ___________________________/___  `,
  /  oooooooooooooooo  .o.  oooo /,   \,"-----------
 / ==ooooooooooooooo==.o.  ooo= //   ,`\--{)B     ,"
/_==__==========__==_ooo__ooo=_/'   /___________,"
```



# Instala√ß√£o

## Requisitos

* Linux, macOS ou WSL (Windows Subsystem for Linux)

* Bash 4.0+ ou Zsh

* Git

* Docker (opcional, necess√°rio para m√≥dulos Docker e Servers)

## Instala√ß√£o R√°pida

```BASH
# Instala√ß√£o via curl
curl -fsSL https://raw.githubusercontent.com/mrpunkdasilva/bytebabe/main/install.sh | bash

# Verificar instala√ß√£o
bytebabe --version
```

## Instala√ß√£o Manual

```BASH
# Clone o reposit√≥rio
git clone https://github.com/mrpunkdasilva/bytebabe.git

# Entre no diret√≥rio
cd bytebabe

# Instale o ByteBabe
./install.sh

# Adicione ao PATH (se n√£o for feito automaticamente)
echo 'export PATH="$HOME/.bytebabe/bin:$PATH"' >> ~/.bashrc
source ~/.bashrc
```

## Configura√ß√£o Inicial

Ap√≥s a instala√ß√£o, execute o comando de inicializa√ß√£o:

```BASH
bytebabe init
```

Este comando ir√°:

1. Verificar depend√™ncias

2. Configurar diret√≥rios necess√°rios

3. Criar arquivos de configura√ß√£o padr√£o

4. Oferecer configura√ß√£o guiada dos m√≥dulos

## Pr√≥ximos Passos

* [Quick Start](quick-start.html) - Primeiros comandos

* [Core Modules](core-modules.html) - Vis√£o geral dos m√≥dulos



# Quick Start

Tip:

"A vida √© curta demais para CLIs complicadas"

## Primeiros Comandos

### Hello World!

```BASH
bytebabe hello
```

### Ver todos os comandos

```BASH
bytebabe --help
```

## M√≥dulos Principais

### Docker

```BASH
# Iniciar containers
bytebabe docker up

# Ver status
bytebabe docker ps

# Parar tudo
bytebabe docker down
```

### Git

```BASH
# Status estiloso
bytebabe git status

# Commit interativo
bytebabe git commit

# Push com prote√ß√£o
bytebabe git push
```

### Servers

```BASH
# Iniciar servidor de desenvolvimento
bytebabe servers dev

# Configurar proxy reverso
bytebabe servers proxy
```

## Exemplos Pr√°ticos

### Configurar Ambiente de Desenvolvimento

```BASH
# Configurar ambiente
bytebabe init

# Configurar ambiente Docker
bytebabe docker init

# Iniciar servi√ßos
bytebabe docker up
```

### Workflow Git

```BASH
# Ver status do repo
bytebabe git status

# Staging interativo
bytebabe git stage

# Commit com mensagem formatada
bytebabe git commit
```

## Pr√≥ximos Passos

* [Docker Module](docker-module.html)

* [Git Module](git-module.html)

* [Servers](servers.html)

* [Database Module](database-module.html)



# Suporte Windows (Em Breve)

Tip:

"Por enquanto, Windows-chan s√≥ pode nos observar de longe... (‚ï•Ôπè‚ï•)"

## Status Atual

üöß Sem Suporte Nativo üöß

Atualmente, o ByteBabe CLI √© desenvolvido exclusivamente para ambientes Unix-like (Linux/macOS).

## Alternativas Dispon√≠veis

### 1. Windows Subsystem for Linux (WSL)

* Instale o WSL2

* Use uma distribui√ß√£o Linux compat√≠vel (Ubuntu recomendado)

* Instale o ByteBabe normalmente dentro do WSL

### 2. Git Bash

* Instale o Git for Windows

* Use o Git Bash como terminal

* Algumas funcionalidades podem n√£o funcionar corretamente

## Limita√ß√µes Conhecidas

* Sem suporte nativo para PowerShell

* Sem instalador Windows (.exe/.msi)

* Alguns comandos podem falhar no Git Bash

* Depend√™ncias espec√≠ficas do Linux necess√°rias

## Pr√≥ximos Passos

Por enquanto, recomendamos fortemente o uso do WSL2 para a melhor experi√™ncia poss√≠vel no Windows.

## Precisa de Ajuda?

* Consulte nossa [documenta√ß√£o de instala√ß√£o](installation.html)

* Veja o guia de [troubleshooting](troubleshooting.html)

* Reporte problemas no [GitHub](https://github.com/mrpunkdasilva/bytebabe/issues)



# Status dos M√≥dulos

Esta p√°gina mostra o status atual de desenvolvimento de cada m√≥dulo do ByteBabe CLI.

## M√≥dulos Principais

| M√≥dulo |Status |Descri√ß√£o |
-----------------------------
| Docker |Est√°vel |Gerenciamento de containers, imagens e volumes |
| Database |Est√°vel |Suporte a MySQL, PostgreSQL, MongoDB e Redis |
| Git |Est√°vel |Opera√ß√µes Git com interface melhorada |
| Servers |Est√°vel |Gerenciamento de servidores Apache e Nginx |
| DevTools |Est√°vel |Instala√ß√£o de ferramentas de desenvolvimento |

## M√≥dulos em Desenvolvimento

| M√≥dulo |Status |Previs√£o |
----------------------------
| Security |Em Desenvolvimento |Q3 2023 |
| Firewall |Planejado |Q4 2023 |
| Monitoring |Planejado |Q4 2023 |

## Legenda de Status

* Est√°vel: M√≥dulo completo e testado

* Beta: Funcional mas pode conter bugs

* Em Desenvolvimento: Trabalho em andamento

* Planejado: Ainda n√£o iniciado



# Core Modules

Tip:

"Um m√≥dulo para cada necessidade, uma solu√ß√£o para cada problema"

## Vis√£o Geral

ByteBabe oferece um conjunto poderoso de m√≥dulos core, cada um projetado para simplificar aspectos espec√≠ficos do desenvolvimento.

## M√≥dulos Dispon√≠veis

### üê≥ Docker Module

* Gerenciamento completo de containers

* Opera√ß√µes com imagens e volumes

* Orquestra√ß√£o via Compose

* [Saiba mais](docker-module.html)

### üóÑÔ∏è Database Module

* Suporte a m√∫ltiplos bancos de dados

* Backup e restore simplificados

* Ferramentas de migra√ß√£o

* [Saiba mais](database-module.html)

### üõ°Ô∏è Firewall Module

* Gerenciamento de regras

* Perfis de seguran√ßa

* Monitoramento em tempo real

* [Saiba mais](firewall-module.html)

### üîÑ Git Module

* Workflows otimizados

* Gerenciamento de branches

* Hooks personalizados

* [Saiba mais](git-module.html)

## Caracter√≠sticas Comuns

| Caracter√≠stica |Descri√ß√£o |
-----------------------------
| Interface CLI |Comandos intuitivos e consistentes |
| Modo Cyberpunk |Visual estilizado e feedback colorido |
| Documenta√ß√£o |Help detalhado e exemplos pr√°ticos |
| Extensibilidade |Plugins e customiza√ß√µes |

## Integra√ß√£o

Todos os m√≥dulos core:

* Compartilham a mesma base de configura√ß√£o

* Podem ser usados independentemente

* Oferecem interfaces consistentes

* Suportam automa√ß√£o via scripts

## Pr√≥ximos Passos

* [üê≥ Docker Module](docker-module.html)

* [üóÑÔ∏è Database Module](database-module.html)

* [üõ°Ô∏è Firewall Module](firewall-module.html)

* [üîÑ Git Module](git-module.html)



# Package Management System

Tip:

Sistema modular de gerenciamento de pacotes e servi√ßos do sistema

## Estrutura do M√≥dulo PKG

O sistema PKG √© dividido em subm√≥dulos especializados, cada um respons√°vel por uma √°rea espec√≠fica do gerenciamento do sistema.

### M√≥dulos Dispon√≠veis

* [Upgrade](upgrade.html) - Atualiza√ß√£o do sistema

* [Install](install.html) - Instala√ß√£o de pacotes

* [Remove](remove.html) - Remo√ß√£o de pacotes

* [Backup](backup.html) - Sistema de backup

* [Service](service.html) - Gerenciamento de servi√ßos

* [Network](network.html) - Configura√ß√µes de rede

* [Firewall](firewall.html) - Prote√ß√£o do sistema

* [Clean](clean.html) - Limpeza do sistema

* [Info](info.html) - Informa√ß√µes do sistema

* [List](list.html) - Listagem de pacotes

* [Log](log.html) - Gerenciamento de logs

* [Scan](scan.html) - Varredura de seguran√ßa

* [Quarantine](quarantine.html) - Isolamento de amea√ßas



# üîÑ Upgrade Module

## Descri√ß√£o

Gerencia todas as atualiza√ß√µes do sistema, incluindo pacotes nativos e Flatpak.

## Comandos

```BASH
prime upgrade        # Atualiza todo o sistema
prime up            # Alias curto
```

## Funcionalidades

* Atualiza√ß√£o do sistema base

* Atualiza√ß√£o de pacotes instalados

* Atualiza√ß√£o de Flatpaks

* Verifica√ß√£o de depend√™ncias

* Backup autom√°tico pr√©-atualiza√ß√£o

## Fluxo de Atualiza√ß√£o

1. Verifica√ß√£o de conex√£o

2. Backup de seguran√ßa

3. Atualiza√ß√£o da base do sistema

4. Atualiza√ß√£o de pacotes

5. Atualiza√ß√£o de Flatpaks

6. Limpeza de cache



# ‚ö° Install Module

## Descri√ß√£o

Gerencia a instala√ß√£o de pacotes atrav√©s de diferentes gerenciadores.

## Comandos

```BASH
prime install [pacote]    # Instala√ß√£o completa
prime in [pacote]        # Forma curta
prime i [pacote]         # Alias mais curto
```

## Funcionalidades

* Detec√ß√£o autom√°tica do gerenciador

* Suporte a m√∫ltiplos pacotes

* Integra√ß√£o com Flatpak

* Resolu√ß√£o de depend√™ncias

* Instala√ß√£o interativa

## Modos de Instala√ß√£o

* Single: Instala√ß√£o de pacote √∫nico

* Batch: Instala√ß√£o em lote

* Interactive: Menu de sele√ß√£o



# üóëÔ∏è Remove Module

## Descri√ß√£o

Sistema de remo√ß√£o segura de pacotes e suas depend√™ncias.

## Comandos

```BASH
prime remove [pacote]    # Remove pacote
prime rm [pacote]       # Alias curto
prime purge [pacote]    # Remove com configura√ß√µes
```

## Funcionalidades

* Remo√ß√£o inteligente

* Limpeza de depend√™ncias

* Backup autom√°tico

* Modo seguro

* Remo√ß√£o em lote

## Modos de Remo√ß√£o

* Simples: Remove apenas o pacote

* Completa: Remove pacote e depend√™ncias

* Purge: Remove pacote, deps e configs

* Interativa: Menu de sele√ß√£o

## Seguran√ßa

* Verifica√ß√£o de depend√™ncias

* Prote√ß√£o contra remo√ß√£o cr√≠tica

* Backup pr√©-remo√ß√£o

* Logs detalhados

* Op√ß√£o de restaura√ß√£o



# üíæ Backup Module

## Descri√ß√£o

Sistema de backup e restaura√ß√£o de arquivos e configura√ß√µes.

## Comandos

```BASH
prime backup create <source> <destination>
prime backup restore <backup_file> <target>
prime backup list
```

## Funcionalidades

* Backup incremental

* Compress√£o autom√°tica

* Agendamento de backups

* Restaura√ß√£o seletiva

* Verifica√ß√£o de integridade

## Tipos de Backup

* Sistema completo

* Configura√ß√µes

* Lista de pacotes

* Dados do usu√°rio



# üîß Service Module

## Descri√ß√£o

Gerenciamento centralizado de servi√ßos do sistema.

## Comandos

```BASH
prime service scan           # Lista servi√ßos
prime service activate      # Inicia servi√ßo
prime service terminate     # Para servi√ßo
prime service reboot       # Reinicia servi√ßo
prime service diagnose     # Status do servi√ßo
```

## Funcionalidades

* Monitoramento em tempo real

* Gest√£o de depend√™ncias

* Logs integrados

* Autorecupera√ß√£o

* Agendamento de tarefas



# üåê Network Module

## Descri√ß√£o

Gerenciamento de configura√ß√µes e diagn√≥sticos de rede.

## Comandos

```BASH
prime network status
prime network scan
prime network configure
prime network troubleshoot
```

## Funcionalidades

* Diagn√≥stico de conex√£o

* Configura√ß√£o de interfaces

* Monitoramento de tr√°fego

* Otimiza√ß√£o de performance

* Resolu√ß√£o de problemas



# üõ°Ô∏è Firewall Module

## Descri√ß√£o

Sistema de prote√ß√£o e controle de acesso √† rede.

## Comandos

```BASH
prime firewall status
prime firewall rules
prime firewall add-rule
prime firewall remove-rule
```

## Funcionalidades

* Regras personalizadas

* Perfis predefinidos

* Monitoramento de tr√°fego

* Bloqueio autom√°tico

* Logs de seguran√ßa



# üßπ Clean Module

## Descri√ß√£o

Sistema de limpeza e otimiza√ß√£o do sistema.

## Comandos

```BASH
prime clean system    # Limpeza do sistema
prime clean cache    # Limpa caches
prime clean temp     # Remove tempor√°rios
prime clean logs     # Limpa logs antigos
```

## Funcionalidades

* Limpeza de cache

* Remo√ß√£o de pacotes √≥rf√£os

* Otimiza√ß√£o de disco

* Limpeza de logs

* Desfragmenta√ß√£o



# ‚ÑπÔ∏è Info Module

## Descri√ß√£o

Sistema de informa√ß√µes sobre pacotes e sistema.

## Comandos

```BASH
prime info [pacote]         # Info do pacote
prime info files [pacote]   # Arquivos do pacote
prime info deps [pacote]    # Depend√™ncias
```

## Funcionalidades

* Detalhes de pacotes

* Informa√ß√µes do sistema

* Estat√≠sticas de uso

* Hist√≥rico de altera√ß√µes

* An√°lise de depend√™ncias



# üìã List Module

## Descri√ß√£o

Sistema de listagem e busca de pacotes instalados e dispon√≠veis.

## Comandos

```BASH
prime list                  # Lista todos os pacotes
prime list installed       # Pacotes instalados
prime list available      # Pacotes dispon√≠veis
prime list updates        # Atualiza√ß√µes pendentes
prime list search <termo> # Busca pacotes
```

## Funcionalidades

* Listagem filtrada

* Busca avan√ßada

* Ordena√ß√£o customizada

* Exporta√ß√£o de listas

* Hist√≥rico de instala√ß√µes

## Formatos de Sa√≠da

* Tabela (padr√£o)

* JSON

* CSV

* YAML



# üìù Log Module

## Descri√ß√£o

Sistema de gerenciamento e an√°lise de logs do sistema.

## Comandos

```BASH
prime log show           # Exibe logs recentes
prime log search <termo> # Busca nos logs
prime log export        # Exporta logs
prime log clean         # Limpa logs antigos
prime log watch         # Monitora logs em tempo real
```

## Funcionalidades

* Visualiza√ß√£o em tempo real

* Filtros avan√ßados

* Rota√ß√£o autom√°tica

* Compress√£o de logs antigos

* An√°lise de padr√µes

## Tipos de Log

* Sistema

* Seguran√ßa

* Aplica√ß√µes

* Performance

* Rede



# üîç Scan Module

## Descri√ß√£o

Sistema de varredura e an√°lise de seguran√ßa do sistema.

## Comandos

```BASH
prime scan system        # Varredura completa
prime scan security     # An√°lise de seguran√ßa
prime scan ports        # Varredura de portas
prime scan malware     # Detec√ß√£o de malware
prime scan updates     # Verifica atualiza√ß√µes
```

## Funcionalidades

* Varredura de vulnerabilidades

* Detec√ß√£o de malware

* An√°lise de portas

* Verifica√ß√£o de integridade

* Relat√≥rios detalhados

## Tipos de Scan

* R√°pido: Verifica√ß√£o b√°sica

* Completo: An√°lise profunda

* Personalizado: Escopo definido

* Agendado: Execu√ß√£o programada

* Background: Scan em segundo plano

## Relat√≥rios

* Resumo executivo

* Detalhes t√©cnicos

* N√≠veis de severidade

* Recomenda√ß√µes

* Hist√≥rico de scans

## Integra√ß√£o

* Firewall

* Antiv√≠rus

* IDS/IPS

* Log System

* Quarantine Module



# üîí Quarantine Module

## Descri√ß√£o

Sistema de isolamento e gest√£o de amea√ßas detectadas.

## Comandos

```BASH
prime quarantine list          # Lista itens
prime quarantine isolate      # Isola arquivo
prime quarantine restore      # Restaura arquivo
prime quarantine remove       # Remove amea√ßa
prime quarantine analyze      # Analisa item
```

## Funcionalidades

* Isolamento autom√°tico

* An√°lise de amea√ßas

* Restaura√ß√£o segura

* Logs detalhados

* Notifica√ß√µes

## N√≠veis de Isolamento

* Baixo risco

* M√©dio risco

* Alto risco

* Cr√≠tico



# Git Module

Tip:

"Git com interface cyberpunk: onde o controle de vers√£o encontra o futuro"

## Vis√£o Geral

O m√≥dulo Git do ByteBabe transforma o Git tradicional em uma experi√™ncia cyberpunk interativa, com menus coloridos e workflows otimizados.

## Interface Principal

```BASH
# Iniciar interface principal
bytebabe git

# Modo r√°pido
bytebabe git quick
```

## Componentes Principais

| Componente |Comando |Descri√ß√£o |
----------------------------------
| Profile Dashboard |`profile` |Identidade e estat√≠sticas |
| Smart Staging |`stage` |Sele√ß√£o interativa de arquivos |
| Commit Wizard |`commit` |Commits sem√¢nticos guiados |
| Branch Navigator |`branch` |Gerenciamento visual de branches |
| Push Controller |`push` |Opera√ß√µes avan√ßadas de push |
| Time Machine |`time` |Hist√≥rico interativo |

## Quick Actions

```BASH
[s] Status    - Ver estado do reposit√≥rio
[c] Commit    - Commit r√°pido
[b] Branches  - Listar branches
[p] Push      - Push para remote
[q] Quit      - Sair do menu
```

## Caracter√≠sticas

* Interface cyberpunk colorida

* Menus interativos

* Valida√ß√µes de seguran√ßa

* Atalhos de teclado

* Feedback visual

* Easter eggs

## Pr√≥ximos Passos

* [üåø Branch Management](branch-management.html)

* [üìÇ Staging Operations](staging-operations.html)

* [üîÑ Git Workflows](git-workflows.html)

* [ü™ù Git Hooks](git-hooks.html)



# Branch Management

## Branch Navigator

Interface visual para gerenciar branches:

```BASH
bytebabe git branch
```

### A√ß√µes Dispon√≠veis

| A√ß√£o |Descri√ß√£o |Comando R√°pido |
-----------------------------------
| Switch Branch |Mudar de branch |`switch` |
| Create Branch |Nova feature branch |`new` |
| Merge Branch |Combinar branches |`merge` |
| Delete Branch |Remover branch local |`delete` |

## Opera√ß√µes Comuns

### Criar Branch

```BASH
# Interativo
bytebabe git branch new

# Direto
bytebabe git branch new feature/nome
```

### Merge de Branches

```BASH
# Merge interativo
bytebabe git branch merge

# Com confirma√ß√£o visual
bytebabe git branch merge develop --visual
```

### Deletar Branches

```BASH
# Com valida√ß√£o
bytebabe git branch delete feature/old

# For√ßa dele√ß√£o
bytebabe git branch delete feature/old --force
```

## Prote√ß√µes

* Valida√ß√£o antes de deletar

* Verifica√ß√£o de merges

* Prote√ß√£o de branches principais

* Detec√ß√£o de conflitos



# Staging Operations

## Smart Staging

Interface interativa para staging de arquivos:

```BASH
bytebabe git stage
```

### Caracter√≠sticas

* Sele√ß√£o m√∫ltipla

* Preview de mudan√ßas

* Filtros por tipo

* Staging parcial

* Undo/Redo

## Comandos Principais

```BASH
# Staging interativo
bytebabe git stage

# Staging r√°pido
bytebabe git stage all

# Unstage
bytebabe git unstage
```

## Modos de Visualiza√ß√£o

| Modo |Descri√ß√£o |Atalho |
---------------------------
| List |Lista simples |`l` |
| Tree |Visualiza√ß√£o em √°rvore |`t` |
| Detail |Detalhes completos |`d` |

## Opera√ß√µes Avan√ßadas

### Staging Parcial

```BASH
# Selecionar hunks
bytebabe git stage --partial

# Review de mudan√ßas
bytebabe git stage --review
```

### Filtros

```BASH
# Por extens√£o
bytebabe git stage "*.js"

# Por diret√≥rio
bytebabe git stage src/
```

## Dicas Pro

1. Use espa√ßo para selecionar

2. Enter para confirmar

3. Tab para navega√ß√£o

4. ? para ajuda



# Git Workflows

## Workflows Suportados

Tip:

Em desenvolvimento

### GitFlow

```BASH
# Iniciar GitFlow
bytebabe git flow init

# Nova feature
bytebabe git flow feature start
```

### Trunk-Based

```BASH
# Setup inicial
bytebabe git trunk setup

# Nova branch curta
bytebabe git trunk feature
```

## Commit Patterns

### Commits Sem√¢nticos

```BASH
# Commit guiado
bytebabe git commit

Tipos dispon√≠veis:
- feat: Nova feature
- fix: Corre√ß√£o de bug
- docs: Documenta√ß√£o
- style: Formata√ß√£o
- refactor: Refatora√ß√£o
- test: Testes
- chore: Tarefas
```

## Automa√ß√µes

Tip:

Em desenvolvimento

### Auto-Branch

```BASH
# Branch por ticket
bytebabe git auto-branch TICKET-123

# Branch por tipo
bytebabe git auto-branch feature/descricao
```

### Auto-Merge

```BASH
# Merge autom√°tico
bytebabe git auto-merge develop

# Com testes
bytebabe git auto-merge --with-tests
```

## Boas Pr√°ticas

1. Use commits sem√¢nticos

2. Mantenha branches atualizadas

3. Fa√ßa merge frequente

4. Revise antes do push



# Git Hooks

Tip:

Em desenvolvimento

## Hooks Dispon√≠veis

### Pre-Commit

```BASH
# Instalar hook
bytebabe git hooks add pre-commit

# Configurar
bytebabe git hooks config pre-commit
```

### Commit-Msg

```BASH
# Valida√ß√£o de mensagem
bytebabe git hooks add commit-msg

# Template personalizado
bytebabe git hooks template commit-msg
```

## Hooks Customizados

### Criar Hook

```BASH
# Novo hook
bytebabe git hooks create meu-hook

# Editar hook
bytebabe git hooks edit meu-hook
```

### Gerenciar Hooks

```BASH
# Listar hooks
bytebabe git hooks list

# Remover hook
bytebabe git hooks remove hook-name
```

## Templates Prontos

| Template |Uso |Comando |
--------------------------
| Lint |Valida√ß√£o de c√≥digo |`lint` |
| Tests |Execu√ß√£o de testes |`test` |
| Format |Formata√ß√£o de c√≥digo |`format` |
| Verify |Valida√ß√µes diversas |`verify` |

## Configura√ß√£o

```YAML
hooks:
  pre-commit:
    - lint
    - test
  commit-msg:
    - semantic
    - jira
```

## Integra√ß√£o

* CI/CD pipelines

* Linters

* Test runners

* Code formatters



# Docker Module

Tip:

"Onde Poseidon encontra o cyberpunk para domar seus containers"

## Vis√£o Geral

O m√≥dulo Docker do ByteBabe oferece uma interface cyberpunk para gerenciar todos os aspectos do Docker, desde containers individuais at√© complexos stacks de servi√ßos.

## Estilos de Comando

### Estilo Verboso (Expl√≠cito)

```BASH
bytebabe docker containers list --all
bytebabe docker images pull nginx
```

### Estilo Curto (Cyberpunk)

```BASH
bytebabe docker c ls -a
bytebabe docker i p nginx
```

## Subcomandos

| Comando |Alias |Descri√ß√£o |Modo Cyberpunk |
---------------------------------------------
| `containers` |`c` |Gerencia containers |Container Commander üéÆ |
| `images` |`i` |Controla imagens |Image Harbor üè¥‚Äç‚ò†Ô∏è |
| `volumes` |`v` |Administra volumes |Volume Bay üíæ |
| `compose` |`co` |Orquestra servi√ßos |Compose Captain üé≠ |
| `stats` |`st` |Monitora recursos |System Watcher üìä |

## Navega√ß√£o

* [Container Management](container-management.html)

* [Image Management](image-management.html)

* [Volume Management](volume-management.html)

* [Compose Operations](compose-operations.html)

* [Docker Monitoring](docker-monitoring.html)



# Container Management

## Comandos Dispon√≠veis

### Estilo Verboso

```BASH
bytebabe docker containers [comando] [op√ß√µes]
```

### Estilo Curto

```BASH
bytebabe docker c [cmd] [opts]
```

## Opera√ß√µes B√°sicas

| Opera√ß√£o |Verboso |Curto |Descri√ß√£o |
---------------------------------------
| Listar |`containers list` |`c ls` |Lista containers |
| Iniciar |`containers start` |`c up` |Inicia containers |
| Parar |`containers stop` |`c down` |Para containers |
| Reiniciar |`containers restart` |`c rs` |Reinicia containers |
| Remover |`containers remove` |`c rm` |Remove containers |

## Menu Interativo

O Container Commander oferece:

* üìã Listagem de containers

* üü¢ Containers em execu√ß√£o

* üîç Pesquisa de containers

* üÜï Cria√ß√£o de containers

* üìä Estat√≠sticas do sistema

## Exemplos

### Estilo Verboso

```BASH
# Listar todos os containers
bytebabe docker containers list --all

# Iniciar container espec√≠fico
bytebabe docker containers start my-container

# Remover container com volumes
bytebabe docker containers remove --volumes my-container
```

### Estilo Curto

```BASH
# Listar todos os containers
bytebabe docker c ls -a

# Iniciar container espec√≠fico
bytebabe docker c up my-container

# Remover container com volumes
bytebabe docker c rm -v my-container
```

## Op√ß√µes Comuns

| Op√ß√£o |Verboso |Curto |Descri√ß√£o |
------------------------------------
| Todos |`--all` |`-a` |Inclui parados |
| Detach |`--detach` |`-d` |Roda em background |
| Force |`--force` |`-f` |For√ßa opera√ß√£o |
| Volumes |`--volumes` |`-v` |Include volumes |



# Image Management

## Comandos Dispon√≠veis

### Estilo Verboso

```BASH
bytebabe docker images [comando] [op√ß√µes]
```

### Estilo Curto

```BASH
bytebabe docker i [cmd] [opts]
```

## Opera√ß√µes B√°sicas

| Opera√ß√£o |Verboso |Curto |Descri√ß√£o |
---------------------------------------
| Listar |`images list` |`i ls` |Lista imagens |
| Pull |`images pull` |`i p` |Baixa imagens |
| Push |`images push` |`i ps` |Envia imagens |
| Build |`images build` |`i b` |Constr√≥i imagens |
| Remove |`images remove` |`i rm` |Remove imagens |

## Categorias de Imagens

* üåê Web Servers: nginx, apache, httpd

* üõ¢Ô∏è Databases: mysql, postgres, mongo

* üíª OS Base: ubuntu, alpine, debian

* üõ†Ô∏è Dev Tools: node, python, golang

* üìä Monitoring: grafana, prometheus

* üîí Security: vault, owasp/zap

## Exemplos

### Estilo Verboso

```BASH
# Listar todas as imagens
bytebabe docker images list --all

# Pull de imagem espec√≠fica
bytebabe docker images pull nginx:latest

# Build com tag
bytebabe docker images build --tag myapp:1.0 .
```

### Estilo Curto

```BASH
# Listar todas as imagens
bytebabe docker i ls -a

# Pull de imagem espec√≠fica
bytebabe docker i p nginx:latest

# Build com tag
bytebabe docker i b -t myapp:1.0 .
```

## Op√ß√µes Comuns

| Op√ß√£o |Verboso |Curto |Descri√ß√£o |
------------------------------------
| Todos |`--all` |`-a` |Mostra intermedi√°rias |
| Tag |`--tag` |`-t` |Define tag |
| Force |`--force` |`-f` |For√ßa opera√ß√£o |
| Quiet |`--quiet` |`-q` |S√≥ IDs |



# Volume Management

## Comandos Dispon√≠veis

### Estilo Verboso

```BASH
bytebabe docker volumes [comando] [op√ß√µes]
```

### Estilo Curto

```BASH
bytebabe docker v [cmd] [opts]
```

## Opera√ß√µes B√°sicas

| Opera√ß√£o |Verboso |Curto |Descri√ß√£o |
---------------------------------------
| Listar |`volumes list` |`v ls` |Lista volumes |
| Criar |`volumes create` |`v new` |Cria volume |
| Inspecionar |`volumes inspect` |`v i` |Detalhes do volume |
| Remove |`volumes remove` |`v rm` |Remove volume |
| Prune |`volumes prune` |`v p` |Limpa n√£o usados |

## Tipos de Volume

* üîß Local

* üåê NFS

* ‚òÅÔ∏è Cloud Storage

* üîí Encrypted

* üì¶ Plugin Volumes

## Exemplos

### Estilo Verboso

```BASH
# Criar volume
bytebabe docker volumes create --name dbdata

# Listar volumes
bytebabe docker volumes list

# Remover volume
bytebabe docker volumes remove dbdata
```

### Estilo Curto

```BASH
# Criar volume
bytebabe docker v new -n dbdata

# Listar volumes
bytebabe docker v ls

# Remover volume
bytebabe docker v rm dbdata
```

## Op√ß√µes Comuns

| Op√ß√£o |Verboso |Curto |Descri√ß√£o |
------------------------------------
| Nome |`--name` |`-n` |Nome do volume |
| Driver |`--driver` |`-d` |Driver do volume |
| Force |`--force` |`-f` |For√ßa opera√ß√£o |
| Quiet |`--quiet` |`-q` |Modo silencioso |



# Compose Operations

## Comandos Dispon√≠veis

### Estilo Verboso

```BASH
bytebabe docker compose [comando] [op√ß√µes]
```

### Estilo Curto

```BASH
bytebabe docker co [cmd] [opts]
```

## Opera√ß√µes B√°sicas

| Opera√ß√£o |Verboso |Curto |Descri√ß√£o |
---------------------------------------
| Up |`compose up` |`co up` |Inicia servi√ßos |
| Down |`compose down` |`co down` |Para servi√ßos |
| Logs |`compose logs` |`co logs` |Mostra logs |
| PS |`compose ps` |`co ps` |Lista servi√ßos |
| Build |`compose build` |`co b` |Build servi√ßos |

## Recursos Avan√ßados

* üîÑ Auto-restart policies

* üåê Network management

* üìä Resource limits

* üîí Secrets handling

* üéØ Health checks

## Exemplos

### Estilo Verboso

```BASH
# Iniciar todos os servi√ßos
bytebabe docker compose up --detach

# Ver logs
bytebabe docker compose logs --follow

# Parar e remover
bytebabe docker compose down --volumes
```

### Estilo Curto

```BASH
# Iniciar todos os servi√ßos
bytebabe docker co up -d

# Ver logs
bytebabe docker co logs -f

# Parar e remover
bytebabe docker co down -v
```

## Op√ß√µes Comuns

| Op√ß√£o |Verboso |Curto |Descri√ß√£o |
------------------------------------
| Detach |`--detach` |`-d` |Background |
| Follow |`--follow` |`-f` |Follow logs |
| Build |`--build` |`-b` |Force build |
| Volumes |`--volumes` |`-v` |With volumes |



# Docker Monitoring üìä

## Comandos Dispon√≠veis

### Estilo Verboso

```BASH
bytebabe docker stats [comando] [op√ß√µes]
```

### Estilo Curto

```BASH
bytebabe docker st [cmd] [opts]
```

## M√©tricas Dispon√≠veis

| M√©trica |Verboso |Curto |Descri√ß√£o |
--------------------------------------
| CPU |`stats cpu` |`st cpu` |Uso de CPU |
| Memory |`stats mem` |`st mem` |Uso de mem√≥ria |
| Network |`stats net` |`st net` |I/O de rede |
| Disk |`stats disk` |`st disk` |I/O de disco |
| All |`stats all` |`st all` |Todas m√©tricas |

## Visualiza√ß√µes

* üìà Gr√°ficos em tempo real

* üìä Tabelas de recursos

* üéØ Alertas configur√°veis

* üì± Dashboard m√≥vel

* üì• Export de dados

## Exemplos

### Estilo Verboso

```BASH
# Ver todas as m√©tricas
bytebabe docker stats show --all

# Monitorar container espec√≠fico
bytebabe docker stats watch --container webapp

# Exportar m√©tricas
bytebabe docker stats export --format json
```

### Estilo Curto

```BASH
# Ver todas as m√©tricas
bytebabe docker st show -a

# Monitorar container espec√≠fico
bytebabe docker st watch -c webapp

# Exportar m√©tricas
bytebabe docker st exp -f json
```

## Op√ß√µes de Visualiza√ß√£o

| Op√ß√£o |Verboso |Curto |Descri√ß√£o |
------------------------------------
| Live |`--live` |`-l` |Atualiza√ß√£o ao vivo |
| Format |`--format` |`-f` |Formato de sa√≠da |
| Interval |`--interval` |`-i` |Intervalo de update |
| NoColor |`--no-color` |`-nc` |Sem cores |



# Database Module

Tip:

"Gerenciamento de bancos de dados com estilo cyberpunk"

## Vis√£o Geral

O m√≥dulo Database do ByteBabe oferece uma interface unificada para gerenciar diferentes bancos de dados atrav√©s de containers Docker, com suporte a opera√ß√µes comuns e monitoramento.

## Comandos Principais

```BASH
# Configura√ß√£o inicial
bytebabe db setup

# Iniciar banco espec√≠fico
bytebabe db start mysql

# Parar todos os bancos
bytebabe db stop

# Ver status
bytebabe db status

# Acompanhar logs
bytebabe db log mongodb
```

## Recursos Principais

* Suporte a m√∫ltiplos bancos de dados

* Backup e restore automatizados

* Ferramentas de migra√ß√£o integradas

* Monitoramento em tempo real

* Interface visual para gest√£o

## Subcomandos

| Comando |Descri√ß√£o |
----------------------
| `setup` |Configura√ß√£o inicial |
| `start` |Inicia banco(s) |
| `stop` |Para banco(s) |
| `status` |Mostra status atual |
| `log` |Exibe logs |

## Pr√≥ximos Passos

* [üìö Bancos Suportados](supported-databases.html)

* [üíæ Backup e Restore](backup-restore.html)

* [üîÑ Ferramentas de Migra√ß√£o](migration-tools.html)

* [üìä Monitoramento](database-monitoring.html)



# Bancos Suportados

## Bancos Dispon√≠veis

### MySQL 8.0

```YAML
Porta: 3306
Usu√°rio: byteuser
Senha: bytepass
Database: bytebabe_db
```

### PostgreSQL 15

```YAML
Porta: 5432
Usu√°rio: byteuser
Senha: bytepass
Database: bytebabe_db
```

### MongoDB 6

```YAML
Porta: 27017
Usu√°rio: root
Senha: example
```

### Redis 7

```YAML
Porta: 6379
```

## Ferramentas de Gest√£o

ByteBabe oferece integra√ß√£o com v√°rias ferramentas GUI:

* TablePlus

* DBeaver

* MongoDB Compass

* pgAdmin

* MySQL Workbench

## Instala√ß√£o

```BASH
# Instalar banco espec√≠fico
bytebabe db install mysql

# Instalar m√∫ltiplos bancos
bytebabe db setup
```

## Configura√ß√£o

Cada banco pode ser customizado atrav√©s do arquivo `config.yaml`:

```YAML
mysql:
  port: 3306
  version: "8.0"
  custom_config: "/path/to/my.cnf"

postgres:
  port: 5432
  version: "15"
  custom_config: "/path/to/postgresql.conf"
```



# Backup e Restore

## Backup Autom√°tico

### Configura√ß√£o

```YAML
backup:
  schedule: "0 0 * * *"  # Todo dia √† meia-noite
  retention: 7           # Manter √∫ltimos 7 backups
  compress: true        # Compactar automaticamente
```

### Comandos

```BASH
# Backup manual
bytebabe db backup mysql

# Backup de todos os bancos
bytebabe db backup all

# Backup com timestamp customizado
bytebabe db backup postgres --timestamp "pre-deploy"
```

## Restore

### Restaura√ß√£o Simples

```BASH
# Restaurar √∫ltimo backup
bytebabe db restore mysql

# Restaurar backup espec√≠fico
bytebabe db restore postgres --file backup-20231225.sql
```

### Restaura√ß√£o Seletiva

```BASH
# Restaurar apenas uma database
bytebabe db restore mysql --database users_db

# Restaurar tabelas espec√≠ficas
bytebabe db restore postgres --tables "users,orders"
```

## Boas Pr√°ticas

1. Configure backups autom√°ticos

2. Teste seus backups regularmente

3. Mantenha c√≥pias em locais diferentes

4. Documente procedimentos de restore



# Ferramentas de Migra√ß√£o

## Vis√£o Geral

ByteBabe oferece ferramentas para:

* Migra√ß√£o de esquema

* Migra√ß√£o de dados

* Versionamento de banco

* Rollback seguro

## Comandos B√°sicos

```BASH
# Criar nova migra√ß√£o
bytebabe db migrate create "add_users_table"

# Executar migra√ß√µes pendentes
bytebabe db migrate up

# Reverter √∫ltima migra√ß√£o
bytebabe db migrate down

# Ver status
bytebabe db migrate status
```

## Estrutura de Migra√ß√µes

```SQL
-- 20231225120000_add_users_table.sql
-- Up
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Down
DROP TABLE users;
```

## Boas Pr√°ticas

1. Uma mudan√ßa por migra√ß√£o

2. Sempre inclua `down` migration

3. Use timestamps consistentes

4. Teste migra√ß√µes em ambiente de dev

5. Fa√ßa backup antes de migrar



# Monitoramento de Bancos

## Dashboard em Tempo Real

```BASH
# Iniciar dashboard
bytebabe db monitor

# Monitorar banco espec√≠fico
bytebabe db monitor mysql

# Modo detalhado
bytebabe db monitor postgres --detailed
```

## M√©tricas Dispon√≠veis

| M√©trica |Descri√ß√£o |
----------------------
| CPU |Uso de processador |
| RAM |Consumo de mem√≥ria |
| Disco |Espa√ßo em disco |
| Conex√µes |Conex√µes ativas |
| Queries |Queries por segundo |

## Alertas

Configure alertas para:

* Alto uso de recursos

* Queries lentas

* Erros de conex√£o

* Espa√ßo em disco baixo

```YAML
alerts:
  cpu_high: 80%
  ram_high: 90%
  disk_low: 10%
  slow_query: 5s
```

## Logs

```BASH
# Ver logs em tempo real
bytebabe db log mysql --follow

# Filtrar logs por tipo
bytebabe db log postgres --type error

# Exportar logs
bytebabe db log mongodb --export logs.txt
```

## Integra√ß√£o

Suporte a exporta√ß√£o de m√©tricas para:

* Prometheus

* Grafana

* DataDog

* NewRelic



# Firewall Module

Tip:

"Seguran√ßa com estilo cyberpunk"

## Vis√£o Geral

O m√≥dulo Firewall do ByteBabe oferece uma interface intuitiva para gerenciar o UFW (Uncomplicated Firewall) com perfis predefinidos e monitoramento em tempo real.

## Comandos Principais

```BASH
# Ver status do firewall
bytebabe firewall status

# Ativar firewall
bytebabe firewall enable

# Configurar perfil
bytebabe firewall setup

# Adicionar regra
bytebabe firewall add
```

## Recursos Principais

* Perfis predefinidos (Dev, DevOps, Security)

* Gerenciamento visual de regras

* Monitoramento em tempo real

* Backup e restore de configura√ß√µes

* Interface CLI intuitiva

## Perfis Dispon√≠veis

| Perfil |Descri√ß√£o |
---------------------
| Developer |Portas para desenvolvimento web |
| DevOps |Configura√ß√£o para Docker, K8s, etc |
| Security |Regras restritas de seguran√ßa |

## Pr√≥ximos Passos

* [üîí Perfis de Seguran√ßa](security-profiles.html)

* [üìã Gerenciamento de Regras](rule-management.html)

* [‚öôÔ∏è Recursos Avan√ßados](advanced-features.html)

* [üìä Monitoramento](firewall-monitoring.html)



# Perfis de Seguran√ßa

## Developer Profile

Ideal para desenvolvimento web local.

```BASH
bytebabe firewall setup
> Select profile: 1
```

### Portas Permitidas

* HTTP (80)

* HTTPS (443)

* React/Node (3000-3999)

* Django/Spring (8000-8999)

* Angular (4200)

* Vite (5173)

## DevOps Profile

Configurado para ambientes de DevOps.

```BASH
bytebabe firewall setup
> Select profile: 2
```

### Portas Permitidas

* Docker (2375-2377)

* Kubernetes (6443, 10250-10252)

* Jenkins (8080)

* Prometheus (9090)

* Grafana (3000)

## Security Profile

Configura√ß√£o restritiva para m√°xima seguran√ßa.

```BASH
bytebabe firewall setup
> Select profile: 3
```

### Caracter√≠sticas

* Logging completo

* Deny por padr√£o

* Rate limiting

* Apenas servi√ßos essenciais

* Monitoramento avan√ßado



# Gerenciamento de Regras

## Comandos B√°sicos

```BASH
# Listar regras
bytebabe firewall list

# Adicionar regra
bytebabe firewall add

# Remover regra
bytebabe firewall remove

# Resetar regras
bytebabe firewall reset
```

## Adicionando Regras

### Interface Interativa

```BASH
bytebabe firewall add
> Enter port number: 80
> Enter protocol (tcp/udp): tcp
> Enter action (allow/deny): allow
```

### Exemplos Comuns

```BASH
# Permitir SSH
Port: 22
Protocol: tcp
Action: allow

# Bloquear porta
Port: 3306
Protocol: tcp
Action: deny
```

## Gerenciamento em Lote

```BASH
# Backup de regras
bytebabe firewall backup

# Restaurar regras
bytebabe firewall restore

# Importar regras
bytebabe firewall import rules.conf
```

## Boas Pr√°ticas

1. Documente todas as regras

2. Use perfis predefinidos

3. Fa√ßa backup regularmente

4. Teste antes de aplicar



# Recursos Avan√ßados

## Rate Limiting

Controle de taxa de conex√µes:

```BASH
# Configurar rate limit para SSH
bytebabe firewall limit ssh

# Limite personalizado
bytebabe firewall limit 80/tcp --rate 100/min
```

## Port Forwarding

```BASH
# Configurar redirecionamento
bytebabe firewall forward
> Source port: 80
> Destination IP: 192.168.1.100
> Destination port: 8080
```

## Bloqueio de IP

```BASH
# Bloquear range de IPs
bytebabe firewall block
> Enter IP range: 192.168.1.0/24

# Whitelist
bytebabe firewall allow 10.0.0.0/8
```

## Backup e Restore

```BASH
# Backup completo
bytebabe firewall backup rules.conf

# Restore seletivo
bytebabe firewall restore --rules "ssh,http"
```

## Logging Avan√ßado

```BASH
# Ativar log detalhado
bytebabe firewall log --level full

# Exportar logs
bytebabe firewall log export
```



# Monitoramento do Firewall

## Dashboard em Tempo Real

```BASH
# Iniciar dashboard
bytebabe firewall monitor

# Modo detalhado
bytebabe firewall monitor --detailed
```

## M√©tricas Dispon√≠veis

| M√©trica |Descri√ß√£o |
----------------------
| Conex√µes |Conex√µes ativas |
| Pacotes |Pacotes processados |
| Drops |Conex√µes bloqueadas |
| Bandwidth |Uso de banda |

## Alertas

Configure alertas para:

* Tentativas de invas√£o

* Portas n√£o autorizadas

* Tr√°fego anormal

* Falhas de regras

```YAML
alerts:
  brute_force: true
  port_scan: true
  ddos: true
  threshold: 1000
```

## Logs

```BASH
# Ver logs em tempo real
bytebabe firewall log --follow

# Filtrar por tipo
bytebabe firewall log --type blocked

# Exportar relat√≥rio
bytebabe firewall report export
```

## Integra√ß√£o

Suporte a exporta√ß√£o para:

* Grafana

* ELK Stack

* Prometheus

* Nagios



# Development Tools

O m√≥dulo DevTools do ByteBabe oferece instala√ß√£o e configura√ß√£o automatizada de ferramentas essenciais para desenvolvimento.

## Categorias de Ferramentas

### Terminal Tools

* Zsh + Oh My Zsh

* Spaceship Prompt

* Plugins (autosuggestions, syntax highlighting, etc)

### Database Tools

* TablePlus

* DBeaver

* MongoDB Compass

* pgAdmin

* MySQL Workbench

### API Tools

* Ferramentas de Teste (curl, httpie, jq, yq, grpcurl, websocat)

* Documenta√ß√£o (Swagger CLI, OpenAPI Generator, Redoc CLI, Spectral)

* Proxy/Debug (mitmproxy, ngrok, wireshark)

* GUI (Postman, Insomnia, Bruno)

### Browser Tools

* Google Chrome

* Firefox

* Brave

* Microsoft Edge

* Vivaldi

## Uso

```BASH
# Modo interativo
bytebabe devtools

# Instala√ß√£o direta
bytebabe devtools [categoria] [ferramenta]

# Exemplos:
bytebabe devtools terminal all      # Instala todas as ferramentas de terminal
bytebabe devtools database dbeaver  # Instala apenas o DBeaver
bytebabe devtools api --test        # Instala ferramentas de teste de API
```

## Caracter√≠sticas

* Instala√ß√£o automatizada

* Detec√ß√£o do gerenciador de pacotes (apt, dnf, pacman)

* Configura√ß√£o pr√©-otimizada

* Interface cyberpunk interativa



# Terminal Tools

## Ferramentas Dispon√≠veis

### Zsh + Oh My Zsh

* Shell avan√ßado com framework de customiza√ß√£o

* Temas e plugins pr√©-configurados

* Spaceship Prompt para visual cyberpunk

### Plugins Inclu√≠dos

* zsh-autosuggestions (sugest√µes baseadas no hist√≥rico)

* zsh-syntax-highlighting (highlight de sintaxe)

* zsh-completions (autocomplete aprimorado)

* colorize (highlight para arquivos)

* colored-man-pages (p√°ginas de manual coloridas)

## Instala√ß√£o

```BASH
# Instalar tudo
bytebabe devtools terminal all

# Instala√ß√µes individuais
bytebabe devtools terminal zsh
bytebabe devtools terminal ohmyzsh
bytebabe devtools terminal spaceship
bytebabe devtools terminal plugins
```

## Configura√ß√µes

O ByteBabe configura automaticamente:

* Temas e cores cyberpunk

* Aliases √∫teis

* Integra√ß√£o com Git

* Autocomplete inteligente

* Hist√≥rico aprimorado



# Database Tools

## Ferramentas Suportadas

### GUI Clients

* TablePlus: Cliente SQL moderno e eficiente

* DBeaver: Cliente universal de banco de dados

* MongoDB Compass: GUI oficial para MongoDB

* pgAdmin: Ferramenta de administra√ß√£o para PostgreSQL

* MySQL Workbench: IDE oficial para MySQL

## Instala√ß√£o

```BASH
# Instalar todas as ferramentas
bytebabe devtools db all

# Instala√ß√µes individuais
bytebabe devtools db tableplus
bytebabe devtools db dbeaver
bytebabe devtools db compass
bytebabe devtools db pgadmin
bytebabe devtools db mysql
```

## Gerenciamento

```BASH
# Listar ferramentas instaladas
bytebabe devtools db list

# Modo interativo
bytebabe devtools db
```

## Compatibilidade

O ByteBabe detecta automaticamente:

* Sistema operacional

* Arquitetura do sistema

* Gerenciador de pacotes

* Depend√™ncias necess√°rias



# API Tools

## Categorias

### Ferramentas de Teste

* curl: Cliente HTTP via linha de comando

* httpie: Cliente HTTP amig√°vel

* jq: Processador JSON

* yq: Processador YAML

* grpcurl: Cliente gRPC

* websocat: Cliente WebSocket

### Documenta√ß√£o

* Swagger CLI: Ferramentas Swagger/OpenAPI

* OpenAPI Generator: Gerador de c√≥digo

* Redoc CLI: Documenta√ß√£o interativa

* Spectral: Linting OpenAPI

### Proxy/Debug

* mitmproxy: Proxy HTTP interceptador

* ngrok: T√∫nel para localhost

* Wireshark: Analisador de pacotes

### GUI Clients

* Postman: Plataforma de API colaborativa

* Insomnia: Cliente REST e GraphQL

* Bruno: Cliente API open-source

## Instala√ß√£o

```BASH
# Instalar por categoria
bytebabe devtools api --test
bytebabe devtools api --docs
bytebabe devtools api --proxy
bytebabe devtools api --gui

# Instala√ß√£o espec√≠fica
bytebabe devtools api postman
```



# Browser Tools

## Navegadores Suportados

### Principais

* Google Chrome: Navegador do Google

* Firefox: Navegador da Mozilla

* Brave: Focado em privacidade

* Microsoft Edge: Navegador da Microsoft

* Vivaldi: Navegador customiz√°vel

## Instala√ß√£o

```BASH
# Instalar todos os navegadores
bytebabe devtools browser all

# Instala√ß√µes individuais
bytebabe devtools browser chrome
bytebabe devtools browser firefox
bytebabe devtools browser brave
bytebabe devtools browser edge
bytebabe devtools browser vivaldi
```

## Gerenciamento

```BASH
# Listar navegadores instalados
bytebabe devtools browser list

# Modo interativo
bytebabe devtools browser
```

## Caracter√≠sticas

* Instala√ß√£o automatizada

* Detec√ß√£o de vers√£o mais recente

* Configura√ß√£o de reposit√≥rios

* Suporte a diferentes distribui√ß√µes Linux



# Web Servers

O m√≥dulo de servidores web do ByteBabe permite gerenciar inst√¢ncias Docker do Apache e Nginx de forma simplificada.

## Configura√ß√£o Padr√£o

* Apache: porta 8080

* Nginx: porta 8081

* SSL: porta 4430

## Comandos B√°sicos

```BASH
# Configura√ß√£o inicial
bytebabe servers setup

# Iniciar servidores
bytebabe servers up [apache|nginx]

# Parar servidores
bytebabe servers down [apache|nginx]

# Ver status
bytebabe servers status
```

## Estrutura de Diret√≥rios

```
docker/
‚îú‚îÄ‚îÄ apache/
‚îÇ   ‚îî‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ nginx/
‚îÇ   ‚îú‚îÄ‚îÄ nginx.conf
‚îÇ   ‚îî‚îÄ‚îÄ index.html
‚îî‚îÄ‚îÄ ssl/
```



# Apache Server üöÄ

## Configura√ß√£o

O servidor Apache √© configurado automaticamente com as seguintes especifica√ß√µes:

```YAML
apache:
  image: httpd:latest
  ports:
    - "8080:80"
  volumes:
    - "./docker/apache:/usr/local/apache2/htdocs"
    - "./docker/ssl:/ssl"
```

## Comandos

```BASH
# Iniciar Apache
bytebabe servers up apache

# Parar Apache
bytebabe servers down apache

# Ver status
bytebabe servers status apache
```

## Diret√≥rio de Conte√∫do

O conte√∫do web deve ser colocado em:

```
docker/apache/
```



# Nginx Server üîÑ

## Configura√ß√£o

O Nginx √© configurado com as seguintes especifica√ß√µes:

```YAML
nginx:
  image: nginx:latest
  ports:
    - "8081:80"
    - "4430:443"
  volumes:
    - "./docker/nginx:/usr/share/nginx/html"
    - "./docker/ssl:/ssl"
    - "./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
```

## Comandos

```BASH
# Iniciar Nginx
bytebabe servers up nginx

# Parar Nginx
bytebabe servers down nginx

# Ver status
bytebabe servers status nginx
```

## Arquivo de Configura√ß√£o

O Nginx usa uma configura√ß√£o padr√£o otimizada que inclui:

* Worker processes autom√°ticos

* Buffer sizes otimizados

* Configura√ß√£o de logs

* Timeouts adequados



# SSL Configuration üîí

## Configura√ß√£o SSL

O suporte SSL est√° dispon√≠vel na porta 4430 e pode ser configurado para ambos os servidores.

## Diret√≥rio SSL

Os certificados devem ser colocados em:

```
docker/ssl/
```

## Volumes SSL

Os certificados s√£o montados automaticamente:

```YAML
volumes:
  - "./docker/ssl:/ssl"
```

## Pr√≥ximos Passos

1. Gerar certificados SSL

2. Configurar virtual hosts

3. Testar conex√µes HTTPS



# Docker Integration

## Compose Configuration

O ByteBabe usa Docker Compose para gerenciar os servidores web:

```YAML
services:
  apache:
    image: httpd:latest
    container_name: "bytebabe_servers_apache"
    ports:
      - "8080:80"
    volumes:
      - "./docker/apache:/usr/local/apache2/htdocs"
    networks:
      - bytebabe_net

  nginx:
    image: nginx:latest
    container_name: "bytebabe_servers_nginx"
    ports:
      - "8081:80"
      - "4430:443"
    volumes:
      - "./docker/nginx:/usr/share/nginx/html"
    networks:
      - bytebabe_net

networks:
  bytebabe_net:
    driver: bridge
```

## Recursos Docker

* Containers isolados

* Rede dedicada

* Volumes persistentes

* Health checks

* Restart policies



# Security

Tip:

"Seguran√ßa √© um estilo de vida, n√£o uma feature"

## Status: Em Desenvolvimento üöß

Este m√≥dulo est√° atualmente em desenvolvimento. As funcionalidades descritas aqui representam o roadmap planejado. Por enquanto, apenas o [m√≥dulo de firewall](firewall-module.html) est√° totalmente implementado.

## Vis√£o Geral

O m√≥dulo de seguran√ßa do ByteBabe ir√° oferecer um conjunto abrangente de ferramentas para proteger seu ambiente de desenvolvimento e produ√ß√£o.

## Roadmap de Recursos

### üõ°Ô∏è Controle de Acesso (Planejado)

* Gerenciamento de usu√°rios e permiss√µes

* Autentica√ß√£o de dois fatores

* Controle de acesso baseado em roles

* [Detalhes futuros](access-control.html)

### üîí Criptografia (Planejado)

* Gerenciamento de chaves

* Criptografia de dados sens√≠veis

* SSL/TLS autom√°tico

* [Detalhes futuros](encryption.html)

### ‚úÖ Boas Pr√°ticas (Planejado)

* Hardening de servidores

* Configura√ß√µes seguras

* Pol√≠ticas de senha

* [Detalhes futuros](security-best-practices.html)

### üîç Varredura de Vulnerabilidades (Planejado)

* Scans autom√°ticos

* Relat√≥rios detalhados

* Mitiga√ß√£o guiada

* [Detalhes futuros](vulnerability-scanning.html)

## Recursos Dispon√≠veis Atualmente

No momento, a seguran√ßa √© gerenciada atrav√©s do m√≥dulo de firewall, que oferece:

```BASH
# Gerenciamento do Firewall
bytebabe firewall status
bytebabe firewall setup
bytebabe firewall enable
```

## Contribuindo

Interessado em ajudar no desenvolvimento?

* Verifique nossas issues no GitHub

* Consulte o guia de contribui√ß√£o

* Entre em contato com a equipe

## Pr√≥ximos Passos

* [üõ°Ô∏è Firewall Module](firewall-module.html) (Implementado)

* [üîë Access Control](access-control.html) (Em desenvolvimento)

* [üîí Encryption](encryption.html) (Planejado)

* [‚úÖ Security Best Practices](security-best-practices.html) (Planejado)



# Access Control

Tip:

Status: Em Desenvolvimento üöß

## Vis√£o Geral

O m√≥dulo de Controle de Acesso ir√° fornecer uma camada robusta de gerenciamento de usu√°rios e permiss√µes para todo o ecossistema ByteBabe.

## Recursos Planejados

### üë• Gerenciamento de Usu√°rios

* Cria√ß√£o e gest√£o de contas

* Perfis de usu√°rio

* Integra√ß√£o com LDAP/AD

* Single Sign-On (SSO)

### üîê Autentica√ß√£o de Dois Fatores

* TOTP (Google Authenticator)

* SMS/Email verification

* Hardware keys (Yubikey)

* Backup codes

### üëÆ RBAC (Role-Based Access Control)

* Defini√ß√£o de roles

* Permiss√µes granulares

* Heran√ßa de roles

* Auditoria de acessos

## Comandos Futuros

```BASH
# Gerenciamento de usu√°rios
bytebabe auth user add
bytebabe auth user remove
bytebabe auth user list

# Gerenciamento de roles
bytebabe auth role create
bytebabe auth role assign

# 2FA
bytebabe auth 2fa setup
bytebabe auth 2fa status
```

## Implementa√ß√£o Futura

Este m√≥dulo est√° atualmente em desenvolvimento. Acompanhe o progresso em nosso GitHub.



# Encryption

Tip:

Status: Planejado üöß

## Vis√£o Geral

O m√≥dulo de Criptografia fornecer√° ferramentas para proteger dados sens√≠veis e gerenciar certificados SSL/TLS de forma automatizada.

## Recursos Planejados

### üîë Gerenciamento de Chaves

* Gera√ß√£o de chaves

* Rota√ß√£o autom√°tica

* Backup seguro

* Hardware Security Module (HSM) support

### üõ°Ô∏è Criptografia de Dados

* Criptografia em repouso

* Criptografia em tr√¢nsito

* Chaves mestras

* Integra√ß√£o com KMS

### üìú SSL/TLS Autom√°tico

* Let's Encrypt integration

* Auto-renewal

* Multi-domain support

* Wildcard certificates

## Comandos Futuros

```BASH
# Gerenciamento de chaves
bytebabe crypto keys generate
bytebabe crypto keys rotate

# SSL/TLS
bytebabe crypto ssl setup
bytebabe crypto ssl renew

# Criptografia
bytebabe crypto encrypt
bytebabe crypto decrypt
```

## Implementa√ß√£o Futura

Este m√≥dulo est√° em fase de planejamento. Acompanhe o desenvolvimento em nosso GitHub.



# Security Best Practices

Tip:

Status: Planejado üöß

## Vis√£o Geral

O m√≥dulo de Boas Pr√°ticas de Seguran√ßa ir√° automatizar a implementa√ß√£o de configura√ß√µes seguras e pol√≠ticas de seguran√ßa recomendadas.

## Recursos Planejados

### üõ°Ô∏è Hardening de Servidores

* Configura√ß√µes seguras do sistema

* Desativa√ß√£o de servi√ßos desnecess√°rios

* Atualiza√ß√µes autom√°ticas

* Prote√ß√£o contra malware

### ‚öôÔ∏è Configura√ß√µes Seguras

* Baseline de seguran√ßa

* Compliance checks

* Remedia√ß√£o autom√°tica

* Relat√≥rios de conformidade

### üîë Pol√≠ticas de Senha

* Requisitos complexos

* Hist√≥rico de senhas

* Expira√ß√£o autom√°tica

* Blacklist de senhas comuns

## Comandos Futuros

```BASH
# Hardening
bytebabe secure harden
bytebabe secure audit

# Pol√≠ticas
bytebabe secure policy set
bytebabe secure policy check

# Compliance
bytebabe secure compliance scan
bytebabe secure compliance report
```

## Implementa√ß√£o Futura

Este m√≥dulo est√° em fase de planejamento. Acompanhe o desenvolvimento em nosso GitHub.



# Vulnerability Scanning

Tip:

Status: Planejado üöß

## Vis√£o Geral

O m√≥dulo de Varredura de Vulnerabilidades ir√° realizar scans autom√°ticos de seguran√ßa e fornecer relat√≥rios detalhados com recomenda√ß√µes de mitiga√ß√£o.

## Recursos Planejados

### üîé Scans Autom√°ticos

* Varredura de portas

* An√°lise de vulnerabilidades

* Detec√ß√£o de malware

* Verifica√ß√£o de configura√ß√µes

### üìä Relat√≥rios Detalhados

* Resumo executivo

* Detalhes t√©cnicos

* N√≠veis de severidade

* Hist√≥rico de scans

### üõ†Ô∏è Mitiga√ß√£o Guiada

* Recomenda√ß√µes pr√°ticas

* Passos de remedia√ß√£o

* Automa√ß√£o de corre√ß√µes

* Verifica√ß√£o p√≥s-mitiga√ß√£o

## Comandos Futuros

```BASH
# Scans
bytebabe scan start
bytebabe scan schedule

# Relat√≥rios
bytebabe scan report
bytebabe scan history

# Mitiga√ß√£o
bytebabe scan fix
bytebabe scan verify
```

## Implementa√ß√£o Futura

Este m√≥dulo est√° em fase de planejamento. Acompanhe o desenvolvimento em nosso GitHub.



# Flux - Terminal API Studio

Tip:

Em desenvolvimento üöß

Tip:

"Seu est√∫dio de APIs direto no terminal. Simples. Poderoso. Cyberpunk."

## Vis√£o Geral

Flux √© um est√∫dio de APIs completo em interface terminal, combinando a velocidade da CLI com a intuitividade de ferramentas GUI como Insomnia e Postman.

## Quick Start

```BASH
# Iniciar interface Flux
bytebabe flux

# Modo r√°pido com √∫ltimo workspace
bytebabe flux quick

# Abrir workspace espec√≠fico
bytebabe flux open my-api
```

## Interface Principal

```
‚îå‚îÄ üåä FLUX API STUDIO ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ [1] Collections  [2] Environment  [3] Console  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ GET  https://api.example.com/users            ‚îÇ
‚îÇ Headers                                       ‚îÇ
‚îÇ Authorization: Bearer {{token}}               ‚îÇ
‚îÇ                                              ‚îÇ
‚îÇ Body                                         ‚îÇ
‚îÇ {                                            ‚îÇ
‚îÇ   "name": "{{user.name}}"                    ‚îÇ
‚îÇ }                                            ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Response: 200 OK (45ms)                       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## Caracter√≠sticas Principais

### üóÇÔ∏è Organiza√ß√£o

* Collections em √°rvore

* Ambientes m√∫ltiplos

* Vari√°veis globais/locais

* Tags e favoritos

### ‚ö° Edi√ß√£o R√°pida

* Atalhos vim-style

* Autocomple√ß√£o inteligente

* Syntax highlighting

* Formata√ß√£o autom√°tica

### üîÑ Requests

* REST/GraphQL/gRPC

* WebSocket/SSE

* Autentica√ß√£o m√∫ltipla

* Chain de requests

### üé® Visual

* Temas cyberpunk

* Cores customiz√°veis

* Layouts flex√≠veis

* Modo compacto

## Atalhos do Teclado

| Atalho |A√ß√£o |
----------------
| `Ctrl+S` |Salvar request |
| `Ctrl+Space` |Autocompletar |
| `Ctrl+Enter` |Enviar request |
| `Ctrl+/` |Busca global |
| `F5` |Recarregar |
| `Esc` |Menu principal |

## Modos de Visualiza√ß√£o

| Modo |Descri√ß√£o |Atalho |
---------------------------
| Split |Editor + Response |`F2` |
| Editor |Apenas editor |`F3` |
| Preview |Visualiza√ß√£o |`F4` |
| Console |Debug mode |`F5` |

## Pr√≥ximos Passos

* [üß™ Testing](flux-testing.html)

* [üìö Documentation](flux-docs.html)

* [üìä Monitoring](flux-monitor.html)

* [üîí Security](flux-security.html)



# Testing Module

## Test Runner

```
‚îå‚îÄ Test Suite: Users API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚úì Should authenticate user                   ‚îÇ
‚îÇ ‚úì Should list all users                      ‚îÇ
‚îÇ ‚úì Should create new user                     ‚îÇ
‚îÇ ‚úó Should validate email format               ‚îÇ
‚îÇ   Error: Invalid email format                ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## Testes Automatizados

### Sintaxe de Teste

```JAVASCRIPT
test("Create user", async () => {
    // Setup
    const userData = {
        name: "John Doe",
        email: "john@cyber.net"
    };

    // Execute
    const response = await request("POST", "/users")
        .withJson(userData)
        .expectStatus(201);

    // Validate
    expect(response.data.id).toBeDefined();
    expect(response.data.name).toBe(userData.name);
});
```

### Assertions Dispon√≠veis

* Status code

* Response body

* Headers

* Response time

* JSON schema

* Custom validations

## Test Collections

### Organiza√ß√£o

* Suites de teste

* Casos de teste

* Setup/Teardown

* Dados de teste

### Execu√ß√£o

```BASH
# Rodar todos os testes
flux test run

# Rodar suite espec√≠fica
flux test run users-api

# Modo watch
flux test watch
```

## Relat√≥rios

### Formatos

* CLI Summary

* HTML Report

* JSON Export

* JUnit XML

### M√©tricas

* Success rate

* Response times

* Coverage

* Trends



# Documentation Module

## Documenta√ß√£o Autom√°tica

```
‚îå‚îÄ API Documentation Generator ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üìÅ Users API                                 ‚îÇ
‚îÇ ‚îú‚îÄ üìò Authentication                         ‚îÇ
‚îÇ ‚îÇ  ‚îú‚îÄ POST /auth/login                      ‚îÇ
‚îÇ ‚îÇ  ‚îî‚îÄ POST /auth/refresh                    ‚îÇ
‚îÇ ‚îÇ                                           ‚îÇ
‚îÇ ‚îú‚îÄ üìò User Management                       ‚îÇ
‚îÇ ‚îÇ  ‚îú‚îÄ GET /users                           ‚îÇ
‚îÇ ‚îÇ  ‚îú‚îÄ POST /users                          ‚îÇ
‚îÇ ‚îÇ  ‚îî‚îÄ PUT /users/{id}                      ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## Formatos Suportados

### Export

* OpenAPI/Swagger

* Markdown

* HTML

* PDF

* Postman Collection

### Import

* Swagger/OpenAPI

* Postman Collections

* HAR files

* cURL commands

## Features

### Auto-Documentation

* Request/Response examples

* Schema detection

* Parameter description

* Authentication details

### Markdown Enhancement

```MARKDOWN
### Get User [GET /users/{id}]

Parameters:
- id: string (required) - User ID

Response:
```json
{
"id": "123",
"name": "John Doe"
}
```




```

### Live Preview

- Real-time rendering
- Syntax highlighting
- Interactive examples
- Search/Filter

## Publica√ß√£o

### Export Options

- Static site
- Single page
- Dark/Light theme
- Custom branding
```












# Monitoring Module

## Dashboard

```
‚îå‚îÄ API Monitor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Status: üü¢ All Systems Operational         ‚îÇ
‚îÇ                                           ‚îÇ
‚îÇ Uptime: 99.9%    Latency: 145ms          ‚îÇ
‚îÇ Errors: 0.1%     Requests: 1.2K/min      ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## M√©tricas em Tempo Real

### Performance

* Response time

* Request rate

* Error rate

* Bandwidth usage

### Health Checks

```BASH
# Status check
flux monitor health

# Detailed report
flux monitor report
```

## Alertas

### Configura√ß√£o

```YAML
alerts:
  - name: High Latency
    condition: response_time > 1000ms
    channels: 
      - slack
      - email

  - name: Error Spike
    condition: error_rate > 5%
    channels:
      - webhook
      - telegram
```

### Canais

* Slack

* Email

* Webhook

* Telegram

* Discord

## Visualiza√ß√£o

### Gr√°ficos

* Line charts

* Heat maps

* Status boards

* Error logs

### Timeframes

* Real-time

* Last hour

* Last 24h

* Last 7 days

* Custom range



# Security Module

## Security Scanner

```
‚îå‚îÄ Security Check ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üîç Scanning API endpoints...                ‚îÇ
‚îÇ                                            ‚îÇ
‚îÇ ‚úì Authentication                           ‚îÇ
‚îÇ ‚úì Rate limiting                            ‚îÇ
‚îÇ ‚ö†Ô∏è CORS configuration                      ‚îÇ
‚îÇ ‚úó SSL certificate expiring soon            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## Verifica√ß√µes de Seguran√ßa

### Authentication

* Token validation

* OAuth flows

* API keys

* JWT handling

### Authorization

* Role checking

* Scope validation

* Permission matrix

* Access patterns

### Data Protection

* PII detection

* Data masking

* Encryption check

* Sensitive data

## An√°lise de Vulnerabilidades

### Scans

```BASH
# Quick scan
flux security scan

# Deep scan
flux security scan --deep

# Custom rules
flux security scan --rules custom.yaml
```

### Checklist

* SQL Injection

* XSS

* CSRF

* Rate limiting

* Input validation

* API versioning

## Relat√≥rios

### Security Report

* Vulnerabilities

* Risk levels

* Recommendations

* Compliance status

### Compliance

* OWASP Top 10

* PCI DSS

* GDPR

* Custom standards



# Troubleshooting

Tip:

"Quando as coisas d√£o errado, h√° sempre um caminho cyberpunk para consertar üîß"

## Problemas Comuns

### Docker

#### üî¥ Docker n√£o est√° respondendo

```BASH
# Erro: Cannot connect to the Docker daemon
```

Solu√ß√µes:

1. Verifique se o daemon est√° rodando:

```BASH
sudo systemctl status docker
```

2. Verifique permiss√µes:

```BASH
sudo usermod -aG docker $USER
# Fa√ßa logout e login novamente
```

3. Reinicie o servi√ßo:

```BASH
sudo systemctl restart docker
```

#### üî¥ Permiss√£o negada no Docker

```BASH
# Erro: Permission denied while trying to connect to the Docker daemon socket
```

Solu√ß√µes:

1. Adicione seu usu√°rio ao grupo docker

2. Use `sudo` temporariamente

3. Verifique permiss√µes do socket:

```BASH
sudo chmod 666 /var/run/docker.sock
```

### Configura√ß√£o

#### üî¥ Arquivo de configura√ß√£o n√£o encontrado

```BASH
# Erro: Config file not found in ~/.config/bytebabe/settings.conf
```

Solu√ß√µes:

1. Execute o comando de inicializa√ß√£o:

```BASH
bytebabe init
```

2. Verifique permiss√µes do diret√≥rio:

```BASH
chmod 700 ~/.config/bytebabe
chmod 600 ~/.config/bytebabe/settings.conf
```

#### üî¥ Vari√°veis de ambiente n√£o carregadas

```BASH
# Erro: Environment variables not set
```

Solu√ß√µes:

1. Recarregue seu shell:

```BASH
source ~/.bashrc
```

2. Verifique o arquivo de configura√ß√£o:

```BASH
cat ~/.config/bytebabe/settings.conf
```

### Git

#### üî¥ Configura√ß√µes Git n√£o encontradas

```BASH
# Erro: Git configuration not found
```

Solu√ß√µes:

1. Configure Git globalmente:

```BASH
bytebabe git config --global
```

2. Verifique as configura√ß√µes:

```BASH
bytebabe git config --list
```

### Instala√ß√£o

#### üî¥ Command not found

```BASH
# Erro: bytebabe: command not found
```

Solu√ß√µes:

1. Adicione ao PATH:

```BASH
echo 'export PATH="$HOME/.bytebabe/bin:$PATH"' >> ~/.bashrc
source ~/.bashrc
```

2. Verifique a instala√ß√£o:

```BASH
ls -la ~/.bytebabe/bin
```

#### üî¥ Depend√™ncias faltando

```BASH
# Erro: Required dependency not found
```

Solu√ß√µes:

1. Execute o verificador de depend√™ncias:

```BASH
bytebabe doctor
```

2. Instale manualmente as depend√™ncias necess√°rias

## Logs e Diagn√≥stico

### Verificar Status

```BASH
# Verificar status geral
bytebabe status

# Verificar vers√£o
bytebabe --version

# Verificar configura√ß√£o
bytebabe config show
```

### Logs Detalhados

```BASH
# Ativar modo debug
bytebabe --debug <comando>

# Ver logs
cat ~/.bytebabe/logs/bytebabe.log
```

## Ainda com Problemas?

1. Consulte nossa [documenta√ß√£o completa](installation.html)

2. Verifique [issues conhecidas](https://github.com/mrpunkdasilva/bytebabe/issues)

3. Reporte um novo problema no GitHub

4. Use o comando de diagn√≥stico:

```BASH
bytebabe doctor --full
```



# Common Issues

## Docker Issues

### üî¥ Container n√£o inicia

```BASH
# Erro: Error response from daemon: port is already allocated
```

Solu√ß√£o:

1. Verifique portas em uso:

```BASH
sudo lsof -i -P -n | grep LISTEN
```

2. Altere a porta no docker-compose.yml

3. Pare o servi√ßo usando a porta

### üî¥ Problemas de permiss√£o

```BASH
# Erro: Permission denied
```

Solu√ß√£o:

1. Adicione seu usu√°rio ao grupo docker:

```BASH
sudo usermod -aG docker $USER
```

2. Fa√ßa logout e login

3. Verifique com: `groups`

## Git Issues

### üî¥ Conflitos de merge

```BASH
# Erro: CONFLICT (content): Merge conflict in <file>
```

Solu√ß√£o:

1. Use `bytebabe git status` para ver arquivos

2. Resolva conflitos com `bytebabe git merge --tool`

3. Commit as altera√ß√µes

### üî¥ Branch errada

```BASH
# Situa√ß√£o: Commits na branch errada
```

Solu√ß√£o:

1. Crie nova branch do ponto atual:

```BASH
bytebabe git branch correct-branch
```

2. Reset da branch antiga:

```BASH
bytebabe git reset --hard HEAD~n
```

## Database Issues

### üî¥ Conex√£o falha

```BASH
# Erro: Connection refused
```

Solu√ß√£o:

1. Verifique se o servi√ßo est√° rodando

2. Confira credenciais

3. Teste conectividade:

```BASH
bytebabe db test-connection
```

### üî¥ Backup falha

```BASH
# Erro: Backup failed
```

Solu√ß√£o:

1. Verifique permiss√µes

2. Espa√ßo em disco

3. Use modo verbose:

```BASH
bytebabe db backup --verbose
```

## Network Issues

### üî¥ Firewall bloqueando

```BASH
# Erro: Connection timed out
```

Solu√ß√£o:

1. Verifique regras:

```BASH
bytebabe firewall list
```

2. Adicione exce√ß√£o:

```BASH
bytebabe firewall allow <port>
```

### üî¥ SSL/TLS

```BASH
# Erro: SSL certificate error
```

Solu√ß√£o:

1. Verifique certificado:

```BASH
bytebabe ssl check
```

2. Renove se necess√°rio:

```BASH
bytebabe ssl renew
```



# Error Messages

## Formato dos Erros

```
‚îå‚îÄ ByteBabe Error ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üî¥ ERROR-001: Permission Denied           ‚îÇ
‚îÇ                                          ‚îÇ
‚îÇ Details: Unable to access docker socket   ‚îÇ
‚îÇ Location: docker/client.rs:42            ‚îÇ
‚îÇ Solution: Add user to docker group        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## Cat√°logo de Erros

### Docker (DOCK-XXX)

| C√≥digo |Mensagem |Solu√ß√£o |
-----------------------------
| DOCK-001 |Permission denied |Adicionar usu√°rio ao grupo docker |
| DOCK-002 |Port in use |Mudar porta ou parar servi√ßo |
| DOCK-003 |Image not found |Pull da imagem ou verificar nome |

### Git (GIT-XXX)

| C√≥digo |Mensagem |Solu√ß√£o |
-----------------------------
| GIT-001 |Not a git repository |Inicializar repo ou verificar path |
| GIT-002 |Merge conflict |Resolver conflitos manualmente |
| GIT-003 |Branch not found |Verificar nome da branch |

### Database (DB-XXX)

| C√≥digo |Mensagem |Solu√ß√£o |
-----------------------------
| DB-001 |Connection failed |Verificar credenciais e host |
| DB-002 |Backup failed |Checar permiss√µes e espa√ßo |
| DB-003 |Query error |Validar sintaxe SQL |

### Network (NET-XXX)

| C√≥digo |Mensagem |Solu√ß√£o |
-----------------------------
| NET-001 |Port blocked |Verificar firewall |
| NET-002 |SSL error |Renovar certificado |
| NET-003 |DNS error |Verificar resolu√ß√£o |

## Debug Mode

```BASH
# Ativar modo debug
bytebabe --debug

# Ver stack trace
bytebabe --trace

# Log detalhado
bytebabe --verbose
```

## Error Reporting

### Automatic Report

```BASH
# Enviar relat√≥rio
bytebabe report error DOCK-001

# Com detalhes
bytebabe report error DOCK-001 --details
```

### Manual Collection

1. Logs: `~/.bytebabe/logs/`

2. Config: `~/.bytebabe/config/`

3. System info: `bytebabe system info`



# Debugging Guide

## Ferramentas de Debug

### CLI Debug Mode

```BASH
# Ativar debug
bytebabe --debug

# N√≠veis de log
bytebabe --log-level=trace
bytebabe --log-level=debug
bytebabe --log-level=info
```

### Log Viewer

```BASH
# Ver logs
bytebabe logs show

# Filtrar logs
bytebabe logs filter --level error
bytebabe logs filter --module docker
```

## T√©cnicas de Debug

### 1. Isolamento de Problema

```BASH
# Testar componente espec√≠fico
bytebabe test docker
bytebabe test network
bytebabe test database
```

### 2. Verifica√ß√£o de Estado

```BASH
# Estado do sistema
bytebabe status

# Componentes espec√≠ficos
bytebabe docker status
bytebabe network status
```

### 3. Diagn√≥stico

```BASH
# Verifica√ß√£o completa
bytebabe doctor

# Verifica√ß√µes espec√≠ficas
bytebabe doctor docker
bytebabe doctor network
```

## Debug por M√≥dulo

### Docker Debug

```BASH
# Logs do container
bytebabe docker logs <container>

# Inspe√ß√£o
bytebabe docker inspect <container>

# Network debug
bytebabe docker network debug
```

### Database Debug

```BASH
# Teste de conex√£o
bytebabe db test-connection

# Query log
bytebabe db log-queries

# Performance
bytebabe db analyze-performance
```

### Network Debug

```BASH
# Teste de conectividade
bytebabe network test

# Trace de rota
bytebabe network trace

# Port scanning
bytebabe network scan
```

## An√°lise de Performance

### Profiling

```BASH
# CPU profiling
bytebabe profile cpu

# Memory profiling
bytebabe profile memory

# I/O profiling
bytebabe profile io
```

### Benchmarking

```BASH
# Benchmark comando
bytebabe benchmark <command>

# Compara√ß√£o
bytebabe benchmark compare
```



# Support

## Canais de Suporte

### üåü Community Support

* GitHub Issues

* Discord Server

* Stack Overflow

* Reddit Community

### üéØ Official Support

* Email Support

* Premium Support

* Enterprise Support

* Training Sessions

## FAQ

### Instala√ß√£o

Q: Como atualizar o ByteBabe?

```BASH
bytebabe self-update
```

### Configura√ß√£o

Q: Onde ficam os arquivos de config?

```BASH
~/.bytebabe/config/
```

### Troubleshooting

Q: Como gerar relat√≥rio de diagn√≥stico?

```BASH
bytebabe doctor --report
```

## Recursos

### üìö Documentation

* [Guia de In√≠cio](quick-start.html)

### üéì Learning

* Video Tutorials

* Code Examples

* Use Cases

* Workshops

## Contribuindo

### ü§ù Como Contribuir

1. Fork o reposit√≥rio

2. Crie uma branch

3. Fa√ßa suas altera√ß√µes

4. Envie um PR

### üìù Guidelines

* Coding Standards

* Documentation

* Testing

* Review Process

## Contato

### üìß Email

* support@bytebabe.dev

* security@bytebabe.dev

* feedback@bytebabe.dev

### üí¨ Social

* Twitter: @ByteBabeCLI

* Discord: ByteBabe Community

* GitHub: ByteBabe



# Contributing

## Como Contribuir

### 1. Setup Inicial

```BASH
# Clone o reposit√≥rio
git clone https://github.com/mrpunkdasilva/bytebabe.git

# Entre no diret√≥rio
cd bytebabe

# D√™ permiss√£o de execu√ß√£o
chmod +x bin/bytebabe
```

### 2. Workflow B√°sico

1. Fork o reposit√≥rio

2. Crie uma branch: `feature/sua-feature`

3. Fa√ßa suas altera√ß√µes

4. Teste manualmente os comandos

5. Envie um PR

### 3. Guidelines

* Siga os padr√µes de c√≥digo Shell

* Teste todos os comandos

* Documente mudan√ßas

* Use commits sem√¢nticos

## Estrutura do Projeto

```
bytebabe/
‚îú‚îÄ‚îÄ bin/          # Execut√°vel principal
‚îú‚îÄ‚îÄ commands/     # Comandos da CLI
‚îú‚îÄ‚îÄ lib/          # Fun√ß√µes compartilhadas
‚îî‚îÄ‚îÄ scripts/      # Scripts utilit√°rios
```

## Recursos

* [Development Setup](development-setup.html)

* [Coding Standards](coding-standards.html)

* [Testing Guidelines](testing-guidelines.html)

* [Documentation Guidelines](documentation-guidelines.html)



# Development Setup

## Requisitos

### Sistema

* Linux/macOS

* Bash 4+

* Git

* curl ou wget

### Ferramentas Recomendadas

* shellcheck (para linting)

* shfmt (para formata√ß√£o)

* VSCode ou Neovim

## Setup do Ambiente

### 1. Depend√™ncias B√°sicas

```BASH
# Ubuntu/Debian
sudo apt update
sudo apt install git curl wget shellcheck

# macOS
brew install git curl wget shellcheck
```

### 2. Projeto Setup

```BASH
# Clone o reposit√≥rio
git clone https://github.com/mrpunkdasilva/bytebabe.git
cd bytebabe

# D√™ permiss√£o de execu√ß√£o
chmod +x bin/bytebabe

# Teste a instala√ß√£o
./bin/bytebabe --version
```

## Comandos de Desenvolvimento

### Testes Manuais

```BASH
# Teste um comando espec√≠fico
./bin/bytebabe hello
./bin/bytebabe init

# Teste o modo interativo
./bin/bytebabe
```

### Lint (com shellcheck)

```BASH
# Verificar um arquivo
shellcheck bin/bytebabe

# Verificar todos os scripts
find . -type f -name "*.sh" -exec shellcheck {} \;
```

## IDEs e Editores

### VSCode

Extens√µes recomendadas:

* Shell-format

* ShellCheck

* Bash Debug

### Neovim

Plugins recomendados:

* ale (para shellcheck)

* vim-shell-format



# Coding Standards

## Estilo de C√≥digo

### Shell Script Guidelines

```BASH
# ‚úÖ Bom
function install_package() {
    local package_name="$1"
    if ! command -v "$package_name" &> /dev/null; then
        echo "Instalando $package_name..."
    fi
}

# ‚ùå Evitar
function installPackage {
    packageName=$1
    which $packageName > /dev/null
    if [ $? -ne 0 ]; then
        echo "Instalando $packageName..."
    fi
}
```

### Nomenclatura

* Fun√ß√µes: `snake_case`

* Vari√°veis: `snake_case`

* Constantes: `SCREAMING_SNAKE_CASE`

* Arquivos: `kebab-case.sh`

## Organiza√ß√£o de C√≥digo

### Estrutura de Arquivos

```BASH
# M√≥dulos separados por funcionalidade
commands/
  ‚îú‚îÄ‚îÄ hello.sh
  ‚îú‚îÄ‚îÄ init.sh
  ‚îî‚îÄ‚îÄ git/
      ‚îú‚îÄ‚îÄ main.sh
      ‚îî‚îÄ‚îÄ utils.sh
```

### Imports

```BASH
# Carregar depend√™ncias
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
source "$BASE_DIR/lib/common.sh"
source "$BASE_DIR/lib/utils.sh"
```

## Documenta√ß√£o

### Headers

```BASH
#!/bin/bash
#
# Nome do Script: hello.sh
# Descri√ß√£o: Implementa o comando hello do ByteBabe
# Uso: bytebabe hello [nome]
#
# Argumentos:
#   $1 - Nome do usu√°rio (opcional)
```

## Boas Pr√°ticas

### Error Handling

```BASH
# ‚úÖ Bom
if ! command -v docker &> /dev/null; then
    echo "Erro: Docker n√£o encontrado"
    exit 1
fi

# ‚ùå Evitar
docker ps
if [ $? -ne 0 ]; then
    echo "Erro"
    exit 1
fi
```

### Vari√°veis

```BASH
# ‚úÖ Bom
local user_name="${1:-}"
readonly MAX_RETRIES=3

# ‚ùå Evitar
name=$1
MAXRETRIES=3
```



# Testing Guidelines

## Testes Manuais

### 1. Comandos B√°sicos

```BASH
# Testar vers√£o
./bin/bytebabe --version

# Testar ajuda
./bin/bytebabe --help

# Testar comando hello
./bin/bytebabe hello
```

### 2. Fluxos Completos

```BASH
# Testar inicializa√ß√£o
./bin/bytebabe init

# Testar configura√ß√£o git
./bin/bytebabe git config

# Testar instala√ß√£o de ferramentas
./bin/bytebabe devtools
```

## Checklist de Testes

### Pr√©-commit

* [ ] Verificar sintaxe (shellcheck)

* [ ] Testar comandos b√°sicos

* [ ] Verificar mensagens de erro

* [ ] Testar modo interativo

### P√≥s-commit

* [ ] Testar em ambiente limpo

* [ ] Verificar depend√™ncias

* [ ] Testar instala√ß√£o completa

## Ferramentas

### ShellCheck

```BASH
# Verificar um arquivo
shellcheck commands/hello.sh

# Verificar diret√≥rio
shellcheck commands/*.sh

# Ignorar warnings espec√≠ficos
# shellcheck disable=SC2034
```

### Debug Mode

```BASH
# Ativar debug
set -x
./bin/bytebabe comando
set +x

# Ou usar flag -x
bash -x ./bin/bytebabe comando
```

## Best Practices

### 1. Ambiente de Testes

```BASH
# Criar ambiente isolado
mkdir -p /tmp/bytebabe-test
cd /tmp/bytebabe-test

# Clonar reposit√≥rio fresco
git clone https://github.com/mrpunkdasilva/bytebabe.git
```

### 2. Logs de Teste

```BASH
# Registrar sa√≠da
./bin/bytebabe comando 2>&1 | tee test.log

# Analisar erros
grep "ERROR" test.log
```

### 3. Verifica√ß√µes

```BASH
# Verificar permiss√µes
test -x bin/bytebabe || echo "Erro: bytebabe n√£o √© execut√°vel"

# Verificar arquivos cr√≠ticos
test -f commands/init.sh || echo "Erro: init.sh n√£o encontrado"
```



# Documentation Guidelines

## Estrutura da Documenta√ß√£o

### 1. Headers de Script

```BASH
#!/bin/bash
#
# ByteBabe - Terminal Tools
# 
# Descri√ß√£o:
#   Implementa comandos para configura√ß√£o do terminal
#
# Uso:
#   bytebabe terminal [comando]
#
# Comandos:
#   zsh       - Instala e configura Zsh
#   ohmyzsh   - Instala Oh My Zsh
#   all       - Instala tudo
```

### 2. Fun√ß√µes

```BASH
# Instala e configura o Zsh
#
# Argumentos:
#   Nenhum
#
# Retorna:
#   0 se sucesso, 1 se erro
install_zsh() {
    echo "Instalando Zsh..."
}
```

## Markdown Guidelines

### Headers

```MARKDOWN
# T√≠tulo Principal
## Se√ß√£o Secund√°ria
### Subse√ß√£o
```

### Code Blocks

```MARKDOWN
\```bash
./bytebabe hello
\```
```

### Lists

```MARKDOWN
- Item 1
  - Subitem 1.1
  - Subitem 1.2
- Item 2
```

## Exemplos

### 1. Documenta√ß√£o de Comando

```MARKDOWN
# Comando Hello

Exibe uma mensagem de boas-vindas personalizada.

## Uso
```bash
bytebabe hello [nome]
```








## Argumentos





  * `nome`: Nome do usu√°rio (opcional)






## Exemplos







```BASH
bytebabe hello
bytebabe hello Jo√£o
```


### 2. Documenta√ß√£o de Erro











## Mensagens de Erro





  * "Comando n√£o encontrado": Verifique a instala√ß√£o

  * "Permiss√£o negada": Execute com sudo






## Best Practices





### 1. Clareza





  * Use linguagem simples

  * Forne√ßa exemplos pr√°ticos

  * Documente casos de uso comuns




### 2. Completude





  * Documente todos os comandos

  * Explique todas as op√ß√µes

  * Liste mensagens de erro




### 3. Manuten√ß√£o





  * Mantenha docs atualizadas

  * Verifique exemplos

  * Atualize screenshots












