#!/bin/bash

# Resolve script base directory, even when called via symlink
if [ -L "$0" ]; then
    REAL_SCRIPT_PATH=$(readlink -f "$0")
    BASE_DIR="/home/mrpunkdasilva/bytebabe"
else
    BASE_DIR="/home/mrpunkdasilva/bytebabe"
fi

# Load libraries with absolute paths
source "${BASE_DIR}/lib/core/colors.sh"
source "${BASE_DIR}/lib/core/helpers.sh"
source "${BASE_DIR}/lib/utils/headers.sh"

VERSION="0.1.1"

# Show version information
show_version() {
    echo -e "${CYBER_PINK}╔════════════════════════════════════════════════╗       "
    echo -e "║${CYBER_CYAN}       ▓▓▓ BYTEBABE CLI v${VERSION} ▓▓▓ ${CYBER_PINK}"
    echo -e "║${CYBER_GREEN}   ░▓█►  System: $(uname -srm)${CYBER_PINK}               "
    echo -e "║${CYBER_GREEN}   ░▓█►  Shell: $(basename $SHELL)${CYBER_PINK}           "
    echo -e "║${CYBER_GREEN}   ░▓█►  Uptime: $(uptime -p)${CYBER_PINK}                "
    echo -e "╚════════════════════════════════════════════════╝${RESET}"
}

show_cyberpunk_header

# Process commands
case $1 in
    hello)
        source "${BASE_DIR}/commands/hello.sh" "${@:2}"
        ;;
    init)
        source "${BASE_DIR}/commands/init.sh" "${@:2}"
        ;;
    git)
        source "${BASE_DIR}/commands/git/main.sh"
        ;;
    frontend)
        source "${BASE_DIR}/commands/frontend.sh" "${@:2}"
        ;;
    backend)
        source "${BASE_DIR}/commands/backend.sh" "${@:2}"
        ;;
    servers)
        source "${BASE_DIR}/commands/servers.sh" "${@:2}"
        ;;
    db)
        source "${BASE_DIR}/commands/db.sh" "${@:2}"
        ;;
    edit)
         source "${BASE_DIR}/commands/byteedit.sh" "${@:2}"
        ;;
    ide)
        source "${BASE_DIR}/commands/ide.sh" "${@:2}"
        ;;
    devtools)
        source "${BASE_DIR}/commands/devtools.sh" "${@:2}"
        ;;
    docker)
        source "${BASE_DIR}/commands/docker.sh" "${@:2}"
        ;;
    prime|pm)
        source "${BASE_DIR}/commands/prime.sh" "${@:2}"
        ;;
    gh|github)
        source "${BASE_DIR}/commands/gh.sh" "${@:2}"
        ;;
    --version|-v)
        show_version
        exit 0
        ;;
    --help|-h)
        show_help
        exit 0
        ;;
    *)
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}CORE COMMANDS:${RESET}"
        echo -e "  ${CYBER_GREEN}hello${RESET}         Receba uma mensagem cyberpunk aleatória"
        echo -e "  ${CYBER_GREEN}init${RESET}          Initialize development environment"
        echo -e "  ${CYBER_GREEN}git${RESET}           Advanced Git tools"
        echo -e ""
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}STACK COMMANDS:${RESET}"
        echo -e "  ${CYBER_GREEN}frontend${RESET}      Install frontend stack (Node, React, etc)"
        echo -e "  ${CYBER_GREEN}backend${RESET}       Install backend stack (Python, Java, etc)"
        echo -e "  ${CYBER_GREEN}db${RESET}            Databases (PostgreSQL, MongoDB, etc)"
        echo -e ""
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}DEV ENVIRONMENT:${RESET}"
        echo -e "  ${CYBER_GREEN}ide${RESET}           IDEs (VSCode, IntelliJ, etc)"
        echo -e "  ${CYBER_GREEN}devtools${RESET}      Development tools"
        echo -e "    ${CYBER_GRAY}terminal${RESET}     Terminal configuration"
        echo -e "  ${CYBER_GREEN}docker${RESET}       Docker tools"
        echo -e ""
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}INFRASTRUCTURE:${RESET}"
        echo -e "  ${CYBER_GREEN}servers${RESET}       Server management"
        echo -e "  ${CYBER_GREEN}docker${RESET}        Docker containers and images"
        echo -e ""
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}UTILITIES:${RESET}"
        echo -e "  ${CYBER_GREEN}--help | -h${RESET}   Show this message"
        echo -e "  ${CYBER_GREEN}--version | -v${RESET} Show CLI version"
        ;;
esac