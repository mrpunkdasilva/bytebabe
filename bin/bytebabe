#!/bin/bash

# Resolve script base directory, even when called via symlink
if [ -L "$0" ]; then
    REAL_SCRIPT_PATH=$(readlink -f "$0")
    BASE_DIR="/home/mrpunkdasilva/bytebabe"
else
    BASE_DIR="/home/mrpunkdasilva/bytebabe"
fi

# Load libraries with absolute paths
source "${BASE_DIR}/lib/core/colors.sh"
source "${BASE_DIR}/lib/core/helpers.sh"
source "${BASE_DIR}/lib/utils/headers.sh"

VERSION="0.1.2"

# Show version information
show_version() {
    echo -e "${CYBER_PINK}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó       "
    echo -e "‚ïë${CYBER_CYAN}       ‚ñì‚ñì‚ñì BYTEBABE CLI v${VERSION} ‚ñì‚ñì‚ñì ${CYBER_PINK}"
    echo -e "‚ïë${CYBER_GREEN}   ‚ñë‚ñì‚ñà‚ñ∫  System: $(uname -srm)${CYBER_PINK}               "
    echo -e "‚ïë${CYBER_GREEN}   ‚ñë‚ñì‚ñà‚ñ∫  Shell: $(basename $SHELL)${CYBER_PINK}           "
    echo -e "‚ïë${CYBER_GREEN}   ‚ñë‚ñì‚ñà‚ñ∫  Uptime: $(uptime -p)${CYBER_PINK}                "
    echo -e "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${RESET}"
}

show_cyberpunk_header

# Process commands
case $1 in
    hello)
        source "${BASE_DIR}/commands/hello.sh" "${@:2}"
        ;;
    init)
        source "${BASE_DIR}/commands/init.sh" "${@:2}"
        ;;
    git)
        source "${BASE_DIR}/commands/git/main.sh"
        ;;
    frontend)
        source "${BASE_DIR}/commands/frontend.sh" "${@:2}"
        ;;
    backend)
        source "${BASE_DIR}/commands/backend.sh" "${@:2}"
        ;;
    # Novo comando Spring
    spring)
        source "${BASE_DIR}/commands/backend/spring/main.sh" "${@:2}"
        ;;
    servers)
        source "${BASE_DIR}/commands/servers.sh" "${@:2}"
        ;;
    db)
        source "${BASE_DIR}/commands/db.sh" "${@:2}"
        ;;
    edit)
         source "${BASE_DIR}/commands/byteedit.sh" "${@:2}"
        ;;
    ide)
        source "${BASE_DIR}/commands/ide.sh" "${@:2}"
        ;;
    devtools)
        source "${BASE_DIR}/commands/devtools.sh" "${@:2}"
        ;;
    docker)
        source "${BASE_DIR}/commands/docker.sh" "${@:2}"
        ;;
    prime|pm)
        source "${BASE_DIR}/commands/prime.sh" "${@:2}"
        ;;
    gh|github)
        source "${BASE_DIR}/commands/gh.sh" "${@:2}"
        ;;
    flux)
        source "${BASE_DIR}/commands/flux.sh" "${@:2}"
        ;;
    --version|-v)
        show_version
        exit 0
        ;;
    --help|-h)
        show_help
        exit 0
        ;;
    *)
        echo -e "${CYBER_YELLOW}‚ö° ${CYBER_BLUE}CORE COMMANDS:${RESET}"
        echo -e "  ${CYBER_GREEN}hello${RESET}         Receba uma mensagem cyberpunk aleat√≥ria"
        echo -e "  ${CYBER_GREEN}init${RESET}          Initialize development environment"
        echo -e "  ${CYBER_GREEN}edit${RESET}          Edit ByteBabe configuration files"
        echo -e ""
        echo -e "${CYBER_YELLOW}‚ö° ${CYBER_BLUE}DEVELOPMENT STACK:${RESET}"
        echo -e "  ${CYBER_GREEN}frontend${RESET}      Frontend development tools"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ setup${RESET}     Configure frontend environment"
        echo -e "  ${CYBER_GREEN}backend${RESET}       Backend development tools"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ setup${RESET}     Configure backend environment"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ install${RESET}   Install specific technology"
        echo -e "  ${CYBER_GREEN}spring${RESET}        Spring Boot development tools"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ new${RESET}       Create new Spring Boot project"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ generate${RESET}  Generate Spring components"
        echo -e ""
        echo -e "${CYBER_YELLOW}‚ö° ${CYBER_BLUE}DEVELOPMENT TOOLS:${RESET}"
        echo -e "  ${CYBER_GREEN}ide${RESET}           IDE management"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ vscode${RESET}    VSCode setup and extensions"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ intellij${RESET}  IntelliJ IDEA setup"
        echo -e "  ${CYBER_GREEN}devtools${RESET}      Development utilities"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ terminal${RESET}  Terminal configuration (Zsh/OhMyZsh)"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ database${RESET}  Database tools (DBeaver/Compass)"
        echo -e ""
        echo -e "${CYBER_YELLOW}‚ö° ${CYBER_BLUE}VERSION CONTROL:${RESET}"
        echo -e "  ${CYBER_GREEN}git${RESET}           Advanced Git operations"
        echo -e "  ${CYBER_GREEN}gh${RESET}, ${CYBER_GREEN}github${RESET}    GitHub CLI tools and shortcuts"
        echo -e ""
        echo -e "${CYBER_YELLOW}‚ö° ${CYBER_BLUE}INFRASTRUCTURE:${RESET}"
        echo -e "  ${CYBER_GREEN}servers${RESET}       Server management"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ up/down${RESET}   Start/stop servers"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ status${RESET}    Check server status"
        echo -e "  ${CYBER_GREEN}docker${RESET}        Docker operations"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ up/down${RESET}   Container management"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ logs${RESET}      Container logs"
        echo -e ""
        echo -e "${CYBER_YELLOW}‚ö° ${CYBER_BLUE}DATABASE TOOLS:${RESET}"
        echo -e "  ${CYBER_GREEN}db${RESET}            Database operations"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ setup${RESET}     Configure databases"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ install${RESET}   Install specific database"
        echo -e "    ${CYBER_GRAY}‚îî‚îÄ start/stop${RESET} Database service control"
        echo -e ""
        echo -e "${CYBER_YELLOW}‚ö° ${CYBER_BLUE}API TOOLS:${RESET}"
        echo -e "  ${CYBER_GREEN}flux${RESET}          Terminal API Studio üåä"
        echo -e "  ${CYBER_GREEN}prime${RESET}, ${CYBER_GREEN}pm${RESET}     Prime API tools"
        echo -e ""
        echo -e "${CYBER_YELLOW}‚ö° ${CYBER_BLUE}SYSTEM:${RESET}"
        echo -e "  ${CYBER_GREEN}--version${RESET}, ${CYBER_GREEN}-v${RESET}  Show CLI version"
        echo -e "  ${CYBER_GREEN}--help${RESET}, ${CYBER_GREEN}-h${RESET}     Show this help message"
        echo -e ""
        echo -e "${CYBER_PURPLE}‚ï∞‚îà‚û§ ${CYBER_GRAY}For detailed command help, use: ${CYBER_CYAN}bytebabe <command> --help${RESET}"
        ;;
esac